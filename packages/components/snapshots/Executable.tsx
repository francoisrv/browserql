import * as React from 'react'
import gql from 'graphql-tag'
import {
  makeExecutableQuery,
  buildMutation,
  buildCompoundQuery,
  printExecutable,
  buildArguments,
  printArguments,
  makeExecutable,
  printExecutableQuery,
} from '@browserql/executable'
import { print } from 'graphql'

import Code from '../Code'

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQuery() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUser(userID: ID!, isVerified: Boolean = false): User
    }
  `
  return (
    <Code
      language="graphql"
      value={print(makeExecutableQuery(schema, 'getUser'))}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function BuildMutationExample() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
    }

    extend type Mutation {
      addUser(email: String!): User
    }
  `
  return (
    <Code language="graphql" value={print(buildMutation(schema, 'addUser'))} />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQueries() {
  const schema = gql`
    type Query {
      getUserById(id: ID!): User!
      getUserTags(userId: ID!): [Tag]!
      getUserBadges(userId: ID!): [Badge]!
      getUser: String
    }

    type User {
      id: ID!
      email: String!
    }

    type Tag {
      id: ID!
      userId: ID!
      title: String!
    }

    type Badge {
      id: ID!
      userId: ID!
      title: String!
    }
  `
  return (
    <Code
      language="graphql"
      value={print(
        makeExecutable(
          schema,
          { userId: 'ID!' },
          ['getUserById', { id: 'userId' }],
          'getUserTags',
          'getUserBadges',
          'getUser'
        )
      )}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function BuildOperationString() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
      getUser(userID: ID!, isVerified: Boolean = false): Settings
    }

    type Settings {
      id: ID!
      userID: ID!
    }
  `
  return (
    <Code language="graphql" value={printOperation(schema, 'User.getUser')} />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function BuildArguments() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUsers(isVerified: Boolean = false, limit: Int = 100): [Users!]!
    }
  `
  return (
    <Code
      language="json"
      value={JSON.stringify(buildArguments(schema, 'Query.getUsers'), null, 2)}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function PrintArguments() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUsers(isVerified: Boolean = false, limit: Int = 100): [Users!]!
    }
  `
  return (
    <Code
      language="graphql"
      value={printArguments(buildArguments(schema, 'Query.getUsers'))}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function PrintArgumentsWithTab() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUsers(isVerified: Boolean = false, limit: Int = 100): [Users!]!
    }
  `
  return (
    <Code
      language="graphql"
      value={printArguments(buildArguments(schema, 'Query.getUsers'), 8)}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function PrintArgumentsWithDefineVariant() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUsers(isVerified: Boolean = false, limit: Int = 100): [Users!]!
    }
  `
  return (
    <Code
      language="graphql"
      value={printArguments(buildArguments(schema, 'Query.getUsers'), 0, {
        variant: 'define',
      })}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function PrintArgumentsWithAssignVariant() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUsers(isVerified: Boolean = false, limit: Int = 100): [Users!]!
    }
  `
  return (
    <Code
      language="graphql"
      value={printArguments(buildArguments(schema, 'Query.getUsers'), 0, {
        variant: 'assign',
        assignments: {
          limit: '$size',
        },
      })}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function PrintExecutableQuery() {
  const schema = gql`
    type User {
      id: ID!
      email: String!
      isVerified: Boolean!
    }

    type Query {
      getUsers(isVerified: Boolean = false, limit: Int = 100): [Users!]!
    }
  `
  return (
    <Code language="text" value={printExecutableQuery(schema, 'getUsers')} />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQueryVariables() {
  const schema = gql`
    type Query {
      sayHello(to: String!, upperCase: Boolean = false): String
    }
  `
  return (
    <Code language="graphql" value={printExecutableQuery(schema, 'sayHello')} />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQueryVariablesMultipleQueries() {
  const schema = gql`
    type Query {
      sayHello(to: String!, upperCase: Boolean = false): String
      divide(number: Int!, by: Int!): Float!
    }
  `
  return (
    <Code
      language="graphql"
      value={printExecutableQuery(schema, 'sayHello', 'divide')}
    />
  )
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQueryNotFound() {
  const schema = gql`
    type Query {
      foo: String
    }
  `
  let error = ''
  try {
    printExecutableQuery(schema, 'bar')
  } catch (e) {
    error = e.message
  }
  return <Code language="text" value={error} />
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQueryDoNotMatch() {
  const schema = gql`
    type Query {
      ceil(number: Float!): Int!
      square(number: Int!): Float!
    }
  `
  let error = ''
  try {
    printExecutableQuery(schema, 'ceil', 'square')
  } catch (e) {
    error = e.message
  }
  return <Code language="text" value={error} />
}

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////

export function MakeExecutableQueryDoNotMatch2() {
  const schema = gql`
    type Query {
      ceil(number: Float!): Int!
      upper(text: String!): String!
    }
  `
  let error = ''
  try {
    console.log(123, printExecutableQuery(schema, 'ceil', 'upper'))
  } catch (e) {
    error = e.message
  }
  return <Code language="text" value={error} />
}
