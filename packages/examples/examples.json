[
  {
    "module": "client",
    "name": "example",
    "bundle": "client\n"
  },
  {
    "module": "executable",
    "name": "example",
    "bundle": "executable\n"
  },
  {
    "module": "firestore",
    "name": "example",
    "bundle": "firestore\n"
  },
  {
    "module": "firestore-react",
    "name": "example",
    "bundle": "firestore-react\n"
  },
  {
    "module": "fp",
    "name": "example",
    "bundle": "fp\n"
  },
  {
    "module": "fragments",
    "name": "example",
    "bundle": ""
  },
  {
    "module": "graphiql",
    "name": "example",
    "bundle": "graphiql\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "example",
    "bundle": "graphql-schema-sclass\n"
  },
  {
    "module": "http",
    "name": "example",
    "bundle": ""
  },
  {
    "module": "input",
    "name": "example",
    "bundle": ""
  },
  {
    "module": "react",
    "name": "example",
    "bundle": ""
  },
  {
    "module": "state",
    "name": "example",
    "bundle": ""
  },
  {
    "module": "cache",
    "name": "usage",
    "bundle": "Apollo cache accessor utility\n\n## Usage\n\n```javascript\nimport cacheql from '@browserql/cache'\nimport connect from '@browserql/connect'\nimport gql from 'graphql-tag'\n\nconst { cache, schema } = connect(\n  gql'type Query { getCounter: Int! @default(value: 100) }'\n)\n\nconst cached = cacheql(cache, schema)\nconst GET_COUNTER = gql`{ getCounter }`\n\ncached.get(GET_COUNTER) // 100\n\ncached.set(GET_COUNTER, 0)\n\ncached.get(GET_COUNTER) // 0\n```\n\n## Demo\n\n```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import React from 'react'\\n\\nexport default function Example() {\\n  return <div>OK</div>\\n}\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import React from 'react'\\n\\nexport default function Example() {\\n  return <div>OK</div>\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "typescript-generator",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\\nimport gents, { NULL_STRATEGY } from '@browserql/typescript-generator'\\nimport gql from 'graphql-tag'\\nimport Code from '../Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport Typography from '@material-ui/core/Typography'\\nimport FormGroup from '@material-ui/core/FormGroup'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport Switch from '@material-ui/core/Switch'\\nimport FormControl from '@material-ui/core/FormControl'\\nimport InputLabel from '@material-ui/core/InputLabel'\\nimport Select from '@material-ui/core/Select'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Paper from '@material-ui/core/Paper'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\\n\\nexport default function TryIt() {\\n  const [graphqlCode, setGraphqlCode] = useState(`type User {\\n  name: String!\\n  age: Int\\n  id: ID!\\n}\\n  `)\\n  const [tsCode, setTsCode] = useState(`interface User {\\n  name: string\\n  age: number | null\\n  id: string | number\\n}\\n  `)\\n  const [useExport, setUseExport] = useState(false)\\n  const [useDeclare, setUseDeclare] = useState(false)\\n  const [ID, setID] = useState('string | number')\\n  const [nullStrategy, setNullStrategy] = useState<NULL_STRATEGY[]>([\\n    NULL_STRATEGY.null,\\n  ])\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  useEffect(() => {\\n    try {\\n      setError(undefined)\\n      setTsCode(\\n        gents(gql(graphqlCode), {\\n          useExport,\\n          useDeclare,\\n          ID,\\n          null: nullStrategy,\\n        })\\n      )\\n    } catch (error) {\\n      setError(error)\\n    }\\n  }, [useExport, graphqlCode, useDeclare, ID, nullStrategy])\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const { value } = e.target\\n    setGraphqlCode(value)\\n  }\\n\\n  const handleUseExport = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseExport(!useExport)\\n    },\\n    [useExport]\\n  )\\n\\n  const handleUseDeclare = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseDeclare(!useDeclare)\\n    },\\n    [useDeclare]\\n  )\\n\\n  const handleID = useCallback((e: ChangeEvent<HTMLInputElement>) => {\\n    setID(e.target.value)\\n  }, [])\\n\\n  const handleNull = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\\n    setNullStrategy((e.target.value as unknown) as NULL_STRATEGY[])\\n  }, [])\\n\\n  console.log({ nullStrategy })\\n\\n  return (\\n    <div style={{ padding: 16 }}>\\n      <Accordion\\n        elevation={0}\\n        defaultExpanded\\n        style={{ marginBottom: 22, borderBottom: '1px solid #eee' }}\\n      >\\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\\n          <Typography variant=\\\"h5\\\">Options</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <Paper\\n            style={{ padding: 12, backgroundColor: '#eee', flex: 1 }}\\n            elevation={0}\\n          >\\n            <FormGroup row style={{ justifyContent: 'center' }}>\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useExport}\\n                    onChange={handleUseExport}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use export\\\"\\n              />\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useDeclare}\\n                    onChange={handleUseDeclare}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use declare\\\"\\n              />\\n              <TextField\\n                id=\\\"outlined-basic\\\"\\n                label=\\\"ID\\\"\\n                variant=\\\"outlined\\\"\\n                value={ID}\\n                style={{ width: 150 }}\\n                onChange={handleID}\\n              />\\n              <FormControl variant=\\\"filled\\\" style={{ marginLeft: 12 }}>\\n                <InputLabel id=\\\"demo-simple-select-filled-label\\\">\\n                  Nullable\\n                </InputLabel>\\n                <Select\\n                  labelId=\\\"demo-simple-select-filled-label\\\"\\n                  id=\\\"demo-simple-select-filled\\\"\\n                  value={nullStrategy}\\n                  onChange={handleNull}\\n                  multiple\\n                >\\n                  <MenuItem value=\\\"null\\\">null</MenuItem>\\n                  <MenuItem value=\\\"undefined\\\">undefined</MenuItem>\\n                  <MenuItem value=\\\"missing\\\">missing</MenuItem>\\n                </Select>\\n              </FormControl>\\n            </FormGroup>\\n          </Paper>\\n        </AccordionDetails>\\n      </Accordion>\\n\\n      <div style={{ display: 'flex', gap: 12, marginBottom: 32 }}>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\">GraphQL input</Typography>\\n        </div>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\" align=\\\"right\\\">\\n            Typescript output\\n          </Typography>\\n        </div>\\n      </div>\\n\\n      <div style={{ display: 'flex', gap: 12 }}>\\n        <div style={{ flex: 1 }}>\\n          <TextField\\n            multiline\\n            fullWidth\\n            rows={20}\\n            value={graphqlCode}\\n            onChange={handleChange}\\n            variant=\\\"filled\\\"\\n            InputProps={{\\n              style: {\\n                fontWeight: 'bold',\\n              },\\n            }}\\n          />\\n        </div>\\n        <div\\n          style={{\\n            flex: 1,\\n            border: '2px solid #ddd',\\n            borderRadius: 6,\\n            padding: 8,\\n          }}\\n        >\\n          {error && (\\n            <div>\\n              <Typography>{error.message}</Typography>\\n            </div>\\n          )}\\n          {!error && <pre>{tsCode}</pre>}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nTryIt.height = 800\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"typescript-generator\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\\nimport gents, { NULL_STRATEGY } from '@browserql/typescript-generator'\\nimport gql from 'graphql-tag'\\nimport Code from '../Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport Typography from '@material-ui/core/Typography'\\nimport FormGroup from '@material-ui/core/FormGroup'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport Switch from '@material-ui/core/Switch'\\nimport FormControl from '@material-ui/core/FormControl'\\nimport InputLabel from '@material-ui/core/InputLabel'\\nimport Select from '@material-ui/core/Select'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Paper from '@material-ui/core/Paper'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\\n\\nexport default function TryIt() {\\n  const [graphqlCode, setGraphqlCode] = useState(`type User {\\n  name: String!\\n  age: Int\\n  id: ID!\\n}\\n  `)\\n  const [tsCode, setTsCode] = useState(`interface User {\\n  name: string\\n  age: number | null\\n  id: string | number\\n}\\n  `)\\n  const [useExport, setUseExport] = useState(false)\\n  const [useDeclare, setUseDeclare] = useState(false)\\n  const [ID, setID] = useState('string | number')\\n  const [nullStrategy, setNullStrategy] = useState<NULL_STRATEGY[]>([\\n    NULL_STRATEGY.null,\\n  ])\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  useEffect(() => {\\n    try {\\n      setError(undefined)\\n      setTsCode(\\n        gents(gql(graphqlCode), {\\n          useExport,\\n          useDeclare,\\n          ID,\\n          null: nullStrategy,\\n        })\\n      )\\n    } catch (error) {\\n      setError(error)\\n    }\\n  }, [useExport, graphqlCode, useDeclare, ID, nullStrategy])\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const { value } = e.target\\n    setGraphqlCode(value)\\n  }\\n\\n  const handleUseExport = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseExport(!useExport)\\n    },\\n    [useExport]\\n  )\\n\\n  const handleUseDeclare = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseDeclare(!useDeclare)\\n    },\\n    [useDeclare]\\n  )\\n\\n  const handleID = useCallback((e: ChangeEvent<HTMLInputElement>) => {\\n    setID(e.target.value)\\n  }, [])\\n\\n  const handleNull = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\\n    setNullStrategy((e.target.value as unknown) as NULL_STRATEGY[])\\n  }, [])\\n\\n  console.log({ nullStrategy })\\n\\n  return (\\n    <div style={{ padding: 16 }}>\\n      <Accordion\\n        elevation={0}\\n        defaultExpanded\\n        style={{ marginBottom: 22, borderBottom: '1px solid #eee' }}\\n      >\\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\\n          <Typography variant=\\\"h5\\\">Options</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <Paper\\n            style={{ padding: 12, backgroundColor: '#eee', flex: 1 }}\\n            elevation={0}\\n          >\\n            <FormGroup row style={{ justifyContent: 'center' }}>\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useExport}\\n                    onChange={handleUseExport}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use export\\\"\\n              />\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useDeclare}\\n                    onChange={handleUseDeclare}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use declare\\\"\\n              />\\n              <TextField\\n                id=\\\"outlined-basic\\\"\\n                label=\\\"ID\\\"\\n                variant=\\\"outlined\\\"\\n                value={ID}\\n                style={{ width: 150 }}\\n                onChange={handleID}\\n              />\\n              <FormControl variant=\\\"filled\\\" style={{ marginLeft: 12 }}>\\n                <InputLabel id=\\\"demo-simple-select-filled-label\\\">\\n                  Nullable\\n                </InputLabel>\\n                <Select\\n                  labelId=\\\"demo-simple-select-filled-label\\\"\\n                  id=\\\"demo-simple-select-filled\\\"\\n                  value={nullStrategy}\\n                  onChange={handleNull}\\n                  multiple\\n                >\\n                  <MenuItem value=\\\"null\\\">null</MenuItem>\\n                  <MenuItem value=\\\"undefined\\\">undefined</MenuItem>\\n                  <MenuItem value=\\\"missing\\\">missing</MenuItem>\\n                </Select>\\n              </FormControl>\\n            </FormGroup>\\n          </Paper>\\n        </AccordionDetails>\\n      </Accordion>\\n\\n      <div style={{ display: 'flex', gap: 12, marginBottom: 32 }}>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\">GraphQL input</Typography>\\n        </div>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\" align=\\\"right\\\">\\n            Typescript output\\n          </Typography>\\n        </div>\\n      </div>\\n\\n      <div style={{ display: 'flex', gap: 12 }}>\\n        <div style={{ flex: 1 }}>\\n          <TextField\\n            multiline\\n            fullWidth\\n            rows={20}\\n            value={graphqlCode}\\n            onChange={handleChange}\\n            variant=\\\"filled\\\"\\n            InputProps={{\\n              style: {\\n                fontWeight: 'bold',\\n              },\\n            }}\\n          />\\n        </div>\\n        <div\\n          style={{\\n            flex: 1,\\n            border: '2px solid #ddd',\\n            borderRadius: 6,\\n            padding: 8,\\n          }}\\n        >\\n          {error && (\\n            <div>\\n              <Typography>{error.message}</Typography>\\n            </div>\\n          )}\\n          {!error && <pre>{tsCode}</pre>}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nTryIt.height = 800\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getArgument",
    "bundle": "Get node's argument by name.\n\nYou need to pass it a name, which will return you a function that you call with the target node\n\n## Get directive's argument\n\n```graphql\ntype A @foo(bar: 24) {\n  id: ID!\n}\n```\n\n```javascript\nimport { getArgument, getType, getDirective } from '@browserql/fpql'\nimport fp from '@browserql/fp'\n\nexport default fp(schema)(\n  // Get type named A\n  getType('A'),\n  // Get in that type directive named foo\n  getDirective('foo'),\n  // Get in that directive argument named bar\n  getArgument('bar')\n)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify([123], null, 2)} />\\n}\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArgument\",\n    \"files\": [\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type A @foo(bar: 24) {\\n  id: ID!\\n}\\n\"\n      },\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify([123], null, 2)} />\\n}\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArgument, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\n\\nexport default fp(schema)(\\n  // Get type named A\\n  getType('A'),\\n  // Get in that type directive named foo\\n  getDirective('foo'),\\n  // Get in that directive argument named bar\\n  getArgument('bar')\\n)\\n\",\n        \"result\": \"\"\n      }\n    ]\n  }\n}\n```\n"
  }
]
