[
  {
    "module": "client",
    "name": "quick-start",
    "bundle": "Create a GraphQL server in the browser\n\n```sandbox\nmystifying-frost-qwhsj\n```\n"
  },
  {
    "module": "fp",
    "name": "example",
    "bundle": "Functional-Programming wrapper\n\n```javascript\nimport fp from '@browserql/fp'\n\nfp([1, 2, 3])(\n  (numbers) => numbers.map((number) => number + 10), // [10, 20, 30]\n  (numbers) => numbers.reduce((sum, number) => sum + number) // 60\n) // 60\n```\n\n## Error handling\n\n```javascript\nfp()(\n  () => throw new Error('Oops'), // Error: Oops\n  (error) => error.message // \"Oops\"\n) // \"Oops\"\n```\n\n## With promises\n\n```javascript\nfp.promises([1, 2, 3])(async (numbers) => http.post('/v1', numbers))\n```\n"
  },
  {
    "module": "firestore-react",
    "name": "about",
    "bundle": "```snapshot2\nFirestoreReact.TryIt\n```\n\n## Components\n\n```jsx\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { build, set } from '@browserql/firestore'\nimport { BrowserqlProvider } from '@browserql/react'\nimport { Firestoreql } from '@browserql/firestore-react'\n\nfunction Todos() {\n  return (\n    <Firestoreql get=\"Todo\" limit={10}>\n      {(todos) => (\n        <ul>\n          {todos.map((todo) => (\n            <Todo key={todo.id} todo={todo} />\n          ))}\n        </ul>\n      )}\n    </Firestoreql>\n  )\n}\n\nfunction Todo({ todo }) {\n  return (\n    <li>\n      <Firestoreql update=\"Todo\">\n        {(update) => (\n          <input\n            type=\"checkbox\"\n            checked={false}\n            onChange={() => update(set('done').to(true))}\n          />\n        )}\n      </Firestoreql>\n      {todo.name}\n    </li>\n  )\n}\n\nfunction AddTodo() {\n  const [name, setName] = React.useState('')\n  return (\n    <>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <Firestoreql add=\"Todo\">\n        {(add) => <button onClick={() => add({ name })}>Add</button>}\n      </Firestoreql>\n    </>\n  )\n}\n\nrender(\n  <BrowserqlProvider {...build(db, schema)}>\n    <AddTodo />\n    <Todos />\n  </BrowerqlProvider>\n)\n```\n\n### Properties\n\n| Prop                                           | Description                                                                      | Type                                                                              | Example                                                                        |\n| ---------------------------------------------- | -------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------ |\n| **get** \\| **add** \\| **update** \\| **remove** | Put here the name of a type that has been tagged with the directive `@firestore` | `string`                                                                          | `<Firestoreql get=\"User\" />`                                                   |\n| **children**                                   | View below                                                                       | `<D = unknown>(data: D, info: { loading: boolean, error?: Error }): ReactElement` | `<Firestoreql get=\"User\" first>{user => <div>{user.name}</div>}</Firestoreql>` |\n| **where**                                      | View below                                                                       | `Where[]`                                                                         | `<Firestoreql get=\"User\" where={[where('email').equals(email)]} />`            |\n| **orderBy**                                    | View below                                                                       | `string`                                                                          | `<Firestoreql get=\"User\" orderBy=\"createdAt\" />`                               |\n| **asc**                                        | View below                                                                       | `boolean`                                                                         | `<Firestoreql get=\"User\" asc={false} />`                                       |\n\n## With HOC\n\n```javascript\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { flow } from 'lodash'\nimport { build, set } from '@browserql/firestore'\nimport { BrowserqlProvider } from '@browserql/react'\nimport { withFirestoreql } from '@browserql/firestore-react'\n\nfunction TodosView({ getTodo, updateTodo, addTodo }) {\n  const [name, setName] = React.useState('')\n\n  if (getTodo.loading) {\n    return <div>Loading</div>\n  }\n\n  return (\n    <>\n      <ul>\n        {getTodo.data.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={false}\n              onChange={() => updateTodo.exec(set('done').to(true))}\n            />\n            {todo.name}\n          </li>\n        ))}\n      </ul>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button onClick={() => addTodo.exec({ name })}>Add</button>\n    </>\n  )\n}\n\nconst Todos = flow(\n  withFirestore.get('Todo'),\n  withFirestore.update('Todo'),\n  withFirestore.add('Todo')\n)(TodosView)\n\nrender(\n  <BrowserqlProvider {...build(db, schema)}>\n    <Todos />\n  </BrowerqlProvider>\n)\n```\n\n## With Hooks\n\n```javascript\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { build, set } from '@browserql/firestore'\nimport { BrowserqlProvider } from '@browserql/react'\nimport { useFirestoreql } from '@browserql/firestore-react'\n\nfunction Todos() {\n  const [name, setName] = React.useState('')\n  const [todos] = useFirestoreql.get('Todo')\n  const [updateTodo] = useFirestoreql.update('Todo')\n  const [addTodo] = useFirestoreql.add('Todo')\n\n  return (\n    <>\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={false}\n              onChange={() => updateTodo(set('done').to(true))}\n            />\n            {todo.name}\n          </li>\n        ))}\n      </ul>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button onClick={() => addTodo({ name })}>Add</button>\n    </>\n  )\n}\n\nrender(\n  <BrowserqlProvider {...build(db, schema)}>\n    <Todos />\n  </BrowerqlProvider>\n)\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "usage",
    "bundle": "Use `GraphQL` to create classes with validation, formatting, required and default values included!\n\nJust enter a schema and it will return you a class\n\n```javascript\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\n\nclass Todo extends GraphqlSchemaClass {\n  static schema = gql`\n    input Todo {\n      title: String!\n      done: Boolean = false\n    }\n  `\n}\n\nconst todo = new Todo({ title: 'Buy milk' })\n\ntodo.toJSON()\n```\n\n```snapshot2\nGraphqlSchemaClass.Example\n```\n\n## static schema\n\nThe schema to use.\n\nBy default we pick the first encountered type as the model.\n\n```javascript\nclass Post extends GraphqlSchemaClass {\n  static readonly schema = gql`\n    type Post {\n      title: String!\n      tags: [Tag!]!\n    }\n\n    type Tag {\n      tilte: String!\n    }\n  `\n}\n\nnew Post({\n  title: '...',\n  tags: [{ title: '...' }]\n})\n```\n\n## static type\n\nSpecify which type to use.\n\n```javascript\nconst schema = gql`\n  type Post {\n    title: String!\n    tags: [Tag!]!\n  }\n\n  type Tag {\n    tilte: String!\n  }\n`\n\nclass Post extends GraphqlSchemaClass {\n  static readonly schema = schema\n  static readonly type = \"Post\"\n}\n\nclass Tag extends GraphqlSchemaClass {\n  static readonly schema = schema\n  static readonly type = \"Tag\"\n}\n\nnew Post({\n  title: '...',\n  tags: [new Tag({ title: '...' })]\n})\n```\n\n## Class\n\n### Constructor\n\nWhen you construct a new instance, just pass the data.\n\n**It has to be a valid schema**\n\n```javascript\nimport graphql from '@browserql/graphql-schema-class'\n\nconst Todo = graphql`\n  type Todo @schema {\n    title: String!\n    done: Boolean! = false\n  }\n`\n\nconst todo = new Todo({ title: 'Buy milk' })\n\ntodo.toJSON()\n```\n\n### get\n\n### set\n\n### toJSON\n\n### toObject\n\n### Custom methods\n\n```graphql\ntype TodoSchema {\n  id: ID!\n  title: String!\n  done: Boolean!\n}\n```\n\n```graphql\ntype TodoModel {\n  new(title: String!, done: Boolean = false): Todo @constructor\n\n  paginate(page: Int = 1, size: Int = 25): [Todo!]! @static\n  getById(id: ID!): Todo @static\n\n  add(todo: AddableTodo!): Todo! @static\n  update(id: ID!, todo: UpdatableTodo): Todo @static\n  remove(id: ID!): Todo @static\n}\n```\n\n```javascript\nimport graphql from '@browserql/graphql-schema-class'\n\nconst todos = []\nlet id = 1\n\nconst Todo = graphql({ schema, model }, {\n  Query: {\n    async paginate({ page, size }) {\n      return todos.slice(page * size, size)\n    }\n    async getById({ id }) {\n      return todos.find(todo => todo.id === id)\n    }\n  },\n  Mutation: {\n    async add({ title, done }) {\n      id++\n      const todo = new Todo({ title, done, id })\n      todos.push(todo)\n      return todo\n    }\n    async update({ id, title, done }) {}\n    async remove({ id }) {}\n  }\n})\n\nconst todo = new Todo({ title: 'Buy milk' })\n\nexpect(todo.get('done')).toBe(false)\n\nconst { id } = await Todo.add(todo.toJSON())\n\ntodo.set({ done: true })\n\nawait Todo.update(id, todo.toJSON())\n\nconst { done } = await Todo.getById(id)\n\nexpect(done).toBe(true)\n```\n\n## How does it work\n\nJust provide the type and it will generate a class that make sure its schema:\n\n- is valid\n- handles required fields\n- handles default values\n- handles value types and type formatting\n- includes serializing\n- can be extended\n- has safe-type getters and setters\n\n## Example with MongoDB\n\n```javascript\nimport gql from 'graphql-tag'\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\nimport {\n  ObjectIDResolver,\n  DateResolver\n} from 'graphql-scalars'\nimport { ObjectID } from 'mongodb'\n\nclass MongodbClass extends GraphqlSchemaClass {\n  static schema = gql`\n    input Post {\n      _id:        ObjectID!\n      author:     ObjectID!\n      createdAt:  Date = now()\n      title:      String!\n    }\n\n    input Author {\n      _id:        ObjectID!\n      createdAt:  Date = now()\n      name:       String!\n    }\n  `\n\n  static scalars = {\n    ObjectID: ObjectIDResolver,\n    Date: DateResolver,\n  }\n\n  static defaultFunctions = {\n    now: () => new Date()\n  }\n\n  static async function find(query) {\n    const documents = await db\n      .collection(MongodbClass.collection)\n      .find(query)\n    return documents.map((document) => new Model(document))\n  }\n\n  defaults = {\n    _id: new ObjectID()\n  }\n\n  isSaved = false\n\n  async function save(document) {\n    const _id = document.get('_id')\n    const collection = db.collection(this.constructor.collection)\n    const doc = document.toObject()\n\n    if (this.isSaved) {\n      await collection.updateOne({ _id }, doc)\n    } else {\n      const { insertedId } = await collection.insertOne(doc)\n      document.set('_id', insertedId)\n      this.isSaved = true\n    }\n  }\n}\n\nclass Post extends MongodbClass {\n  static input = \"Post\"\n  static collection = \"posts\"\n}\n\nclass Author extends MongodbClass {\n  static input = \"Author\"\n  static collection = \"authors\"\n}\n\nconst author = new Author({ name: 'doe' })\n\nauthor.toJSON()\n\nawait author.save()\n\nconst post = new Post({\n  title: 'My new post',\n  author: author.get('_id'),\n})\n\nawait post.save()\n```\n\n```javascript\nimport graphql from '@browserql/graphql-class'\n\nconst scalars = ['scalar JSON', 'scalar EmailAddress']\n\nconst Todo = graphql`\n  type Todo {\n    title: String!\n    done: Boolean = false\n    email: EmailAddress!\n  }\n`\n\nTodo.inject(\n  gql`\n    scalar JSON\n    directive @foo on OBJECT\n  `,\n  {\n    JSON: JSONResolver,\n    '@foo': FooResolver,\n  }\n)\n\nTodo.schema.addScalar('JSON', JSONResolver)\n\nTodo.schema.addDirective('directive @foo on FIELD_DEFINITION')\n\nTodo.resolve('scalar', MyScalar)\n\nconst todo = new Todo() // Error: Missing field Todo.title\n\nconst todo = new Todo({ title: 'Buy milk' })\n\ntodo.get('title') // \"Buy milk\"\n\ntodo.get('done') // false\n\ntodo.set('done', 'Buy milk') // Error: Field Todo.done should be a Boolean\n\ntodo.set('done', true)\n\ntodo.toJSON() // { \"title\": \"Buy milk\", \"done\": true }\n\nconst sayHello = graphql`\n  type Query {\n    sayHello(to: String!): String!\n  }\n`(({ to }) => `hello ${to}`)\n\nsayHello() // Missing required field sayHello.to\n\nconst Post = graphql`\n  type Post {\n    title: String!\n    author: Author!\n  }\n`\n\nconst Author = graphql`\n  type Author {\n    name: String!\n  }\n`\n\nPost.resolve('Author', Author)\n\nclass Post extends (graphql`\n  type Post {\n    title: String!\n    author: Author!\n  }\n`) {\n  static foo = 2\n  bar = true\n}\n```\n"
  },
  {
    "module": "http",
    "name": "about",
    "bundle": "Fire HTTP queries from your front end using GraphQL!\n\n```graphql\ntype Query {\n  getTodo(id: ID!): Todo\n    @http(url: \"https://jsonplaceholder.typicode.com/todos/:id\")\n}\n```\n\n```javascript\nimport { connectHttp } from '@browserql/http'\nimport connect from '@browserql/client'\nimport resolved from '@browserql/resolve'\nimport schema from './schema.graphql'\n\nconst { client, schema: finalSchema } = connect(schema, connectHttp())\nconst { Query } = resolve(finalSchema)\n\nawait client.query(Query.getTodo({ id: 2 }))\n```\n\n```snapshot2\nHTTP.Example\n```\n"
  },
  {
    "module": "react",
    "name": "provider",
    "bundle": "The browserql react provider creates a new browserql client and keeps it under a react context so it is accessible to all its children\n\n```sandbox\nreact-provider-ruh7c\n```\n\n```graphql\ntype Query {\n  sayHello(to: String!): String!\n}\n```\n\n```javascript\nimport React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport { BrowserqlProvider, BrowserqlContext } from '@browserql/react'\nimport { buildQuery } from '@browserql/operations'\n\nconst queries = {\n  sayHello({ to }) {\n    return `Hello ${to}`\n  },\n}\n\nfunction SayHello({ to }) {\n  const context = useContext(BrowserqlContext)\n  const query = buildQuery(context.schema, 'sayHello')\n\n  const { data, loading } = useQuery(query, {\n    variables: { to },\n  })\n\n  if (loading) return <div>Loading...</div>\n\n  return <p>{data.sayHello}</p>\n}\n\nexport default function App() {\n  return (\n    <BrowserqlProvider schema={schema} queries={queries}>\n      <SayHello to=\"everybody\" />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```snapshot2\nReact.SandboxMainExample\n```\n\n## Props\n\nYou can either pass directly a `browserql` client using the `client` prop -- or use any other props to have the provider make the client.\n\n| Prop           | About                                                  | Type                                                               | Required                                        | Default |\n| -------------- | ------------------------------------------------------ | ------------------------------------------------------------------ | ----------------------------------------------- | ------- |\n| **client**     | A browserql client                                     | `BrowserqlClient`                                                  | If you are using it, it has to be the only prop | N/A     |\n| **schema**     | GraphQL definitions                                    | `DocumentNode`                                                     | N                                               | N/A     |\n| **queries**    | A dictionary of query resolvers                        | `Record<string, (variables: V, ctx: BrowserqlClientContext) => D>` | N                                               | N/A     |\n| **mutations**  | A dictionary of mutation resolvers                     | `Record<string, (variables: V, ctx: BrowserqlClientContext) => D>` | N                                               | N/A     |\n| **scalars**    | A dictionary of scalar resolvers                       | `Record<string, GraphQLScalarType>`                                | N                                               | N/A     |\n| **directives** | A dictionary of directive resolvers                    | `Record<string, SchemaDirectiveVisitorClass>`                      | N                                               | N/A     |\n| **extensions** | An argument that can be passed to a `browserql` client | `BrowserqlClientOption[]`                                          | N                                               | N/A     |\n\n### client\n\nYou can pass directly an instance of a [browserql client](/client/usage)\n\n```javascript\nimport connect from '@browserql/client'\n\nconst client = connect(schema)\n\nfunction Foo() {\n  return (\n    <BrowserqlProvider client={client}>\n      <App />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```snapshot2\nReact.ProviderClientProp\n```\n\nOr pass any argument accepted as an argument by the [connect function](/client/usage):\n\n```graphql\nscalar JSON\n\ndirective @variant(name: VARIANT) on FIELD_DEFINITION\n\nenum VARIANT {\n  HIGH\n  LOW\n}\n\ntype Query {\n  getHigh: JSON @variant(name: HIGH)\n}\n\ntype Mutation {\n  changePitchLevel(level: Float!): JSON!\n}\n```\n\n```javascript\nimport { JSONResolver } from 'graphql-scalars'\n\nfunction Foo() {\n  return (\n    <BrowserqlProvider\n      schema={schema}\n      queries={{\n        getHigh() {},\n      }}\n      mutations={{\n        changePitchLevel({ level }) {},\n      }}\n      scalars={{ JSON: JSONResolver }}\n      directives={{ variant: VariantResolver }}\n    >\n      <App />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```snapshot2\nReact.ProviderClientProp\n```\n"
  },
  {
    "module": "state",
    "name": "about",
    "bundle": "```snapshot2\nState.Example\n```\n\n```graphql\ntype Query {\n  getCounter: Int @getState(initialValue: 100)\n}\n```\n\n```graphql\nquery {\n  getCounter\n}\n```\n\n```json\n{\n  \"getCounter\": null\n}\n```\n\n```graphql\nmutation {\n  _set(query: getCounter, to: 100)\n}\n```\n\n```graphql\nquery {\n  getCounter\n}\n```\n\n```json\n{\n  \"getCounter\": 100\n}\n```\n\n## Toggle\n\n```graphql\ntype State @state {\n  hypeTrainInProgress: Boolean! @default(value: false)\n}\n```\n\n```javascript\nstate.get('State.hypeTrainInProgress') // false\n\nstate.toggle('State.hypeTrainInProgress')\n\nstate.get('State.hypeTrainInProgress') // true\n```\n"
  },
  {
    "module": "firestore",
    "name": "about",
    "bundle": "Use GraphQL with Firestore directly in your front-end apps\n\n```snapshot2\nFirestore.TryIt\n```\n\n#### Usage\n\nFirst define your model:\n\n```graphql\n# defs.graphql\ntype Todo @firestore {\n  name: String!\n  done: Boolean! @default(value: false)\n  doneTime: FirestoreTimestamp\n}\n```\n\n_Note the use of the `@firestore` directive: it means this type represents a firestore collection._\n\nThen create your firebase app:\n\n```javascript\n// db.js\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst config = {\n  apiKey: 'xxx',\n  projectId: 'xxx',\n  appId: 'xxx',\n  authDomain: 'xxx',\n}\n\nfirebase.initializeApp(config)\n\nexport default firebase.firestore()\n```\n\nYou can now generate your executable GraphQL schema\n\n```javascript\nimport { build } from '@browserql/firestore'\nimport defs from './defs.graphql'\nimport db from './db'\n\nconst { schema, queries, mutations } = build(db, defs)\n```\n\nConnect it to browserql\n\n```javascript\nimport connect from '@browserql/client'\nimport { connect as connectFirestoreql } from '@browserql/firestore'\n\nconst { client } = connect(connectFirestoreql(db, defs))\n```\n\nThat's it! You can now use our helpers to construct your queries and mutations\n\n```javascript\nimport { add, get, where, orderBy } from '@browserql/firestore'\n\nawait client.query(\n  get(\n    defs,\n    'Todo',\n    where('done').equals(true),\n    where('doneTime').isLesserThan(new Date()),\n    orderBy('doneTime')\n  )\n)\n\nawait client.mutate(add('Todo', { name: 'Buy milk' }))\n```\n\nYou can also use it with react:\n\n```javascript\nimport { Firestoreql } from '@browserql/firestore-react'\n\nfunction Todos() {\n  return (\n    <ul>\n      <Firestoreql each=\"Todo\" limit={100} orderBy=\"createdDate\" asc={false}>\n        {(todo) => (\n          <li>\n            <Firestoreql toggle=\"Todo.done\">\n              {(toggle, { loading }) => (\n                <input\n                  type=\"checkbox\"\n                  checked={todo.done}\n                  onChange={toggle}\n                  disabled={loading}\n                />\n              )}\n            </Firestoreql>\n            <strong>{todo.title}</strong>\n          </li>\n        )}\n      </Firestoreql>\n    </ul>\n  )\n}\n```\n"
  },
  {
    "module": "typescript-generator",
    "name": "usage",
    "bundle": "```typescript\nfunction gents(\n  schema: graphql.DocumentNode\n  options: Options = {}\n): string\n```\n"
  },
  {
    "module": "cache",
    "name": "usage",
    "bundle": "Apollo cache accessor utility\n\n## Usage\n\n```javascript\nimport cacheql from '@browserql/cache'\nimport connect from '@browserql/connect'\nimport gql from 'graphql-tag'\n\nconst { cache, schema } = connect(\n  gql'type Query { getCounter: Int! @default(value: 100) }'\n)\n\nconst cached = cacheql(cache, schema)\nconst GET_COUNTER = gql`{ getCounter }`\n\ncached.get(GET_COUNTER) // 100\n\ncached.set(GET_COUNTER, 0)\n\ncached.get(GET_COUNTER) // 0\n```\n\n## Demo\n\n```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\\nimport React, { useContext } from 'react'\\nimport { BrowserqlContext, BrowserqlProvider } from '@browserql/react'\\nimport gql from 'graphql-tag'\\nimport { useQuery } from '@apollo/client'\\nimport cacheql from '@browserql/cache'\\n\\nconst schema = `type Query {\\n  getCounter(user: ID!): Int\\n}`\\n\\nconst query = gql`\\n  query Query($user: ID!) {\\n    getCounter(user: $user)\\n  }\\n`\\n\\nfunction View() {\\n  const ctx = useContext(BrowserqlContext)\\n  const cached = cacheql(ctx.cache, ctx.schema)\\n  const query1 = useQuery(query, {\\n    variables: { user: 1 },\\n  })\\n  let counter1 = ''\\n  if (query1.loading) {\\n    counter1 = 'loading'\\n  } else if (query1.error) {\\n    counter1 = 'error'\\n  } else {\\n    counter1 = query1.data.getCounter\\n  }\\n  return (\\n    <div>\\n      <Code language=\\\"graphql\\\" value={schema} />\\n      <div>\\n        <ButtonGroup fullWidth>\\n          <Button onClick={() => cached.set(query, { user: 1 }, 10)}>\\n            User 1\\n          </Button>\\n          <Button>User 2</Button>\\n        </ButtonGroup>\\n      </div>\\n      <Code\\n        language=\\\"graphql\\\"\\n        value={`query {\\n  getCounter(user: 1): ${counter1}\\n  getCounter(user: 2): 0\\n}`}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport default function Example() {\\n  return (\\n    <BrowserqlProvider schema={gql(schema)}>\\n      <View />\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 450\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\\nimport React, { useContext } from 'react'\\nimport { BrowserqlContext, BrowserqlProvider } from '@browserql/react'\\nimport gql from 'graphql-tag'\\nimport { useQuery } from '@apollo/client'\\nimport cacheql from '@browserql/cache'\\n\\nconst schema = `type Query {\\n  getCounter(user: ID!): Int\\n}`\\n\\nconst query = gql`\\n  query Query($user: ID!) {\\n    getCounter(user: $user)\\n  }\\n`\\n\\nfunction View() {\\n  const ctx = useContext(BrowserqlContext)\\n  const cached = cacheql(ctx.cache, ctx.schema)\\n  const query1 = useQuery(query, {\\n    variables: { user: 1 },\\n  })\\n  let counter1 = ''\\n  if (query1.loading) {\\n    counter1 = 'loading'\\n  } else if (query1.error) {\\n    counter1 = 'error'\\n  } else {\\n    counter1 = query1.data.getCounter\\n  }\\n  return (\\n    <div>\\n      <Code language=\\\"graphql\\\" value={schema} />\\n      <div>\\n        <ButtonGroup fullWidth>\\n          <Button onClick={() => cached.set(query, { user: 1 }, 10)}>\\n            User 1\\n          </Button>\\n          <Button>User 2</Button>\\n        </ButtonGroup>\\n      </div>\\n      <Code\\n        language=\\\"graphql\\\"\\n        value={`query {\\n  getCounter(user: 1): ${counter1}\\n  getCounter(user: 2): 0\\n}`}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport default function Example() {\\n  return (\\n    <BrowserqlProvider schema={gql(schema)}>\\n      <View />\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 450\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "firestore",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"tryit.tsx\",\n    \"source\": \"import React from 'react'\\nimport gql from 'graphql-tag'\\nimport { BrowserqlProvider } from '@browserql/react'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport { connect as connectFirestoreql } from '@browserql/firestore'\\nimport GraphiQL from '@browserql/graphiql'\\nimport MockFirebase from 'mock-cloud-firestore'\\n\\nexport default function TryIt() {\\n  const fixtureData = {\\n    __collection__: {\\n      users: {\\n        __doc__: {\\n          user_a: {\\n            age: 15,\\n            username: 'user_a',\\n          },\\n        },\\n      },\\n      Todo: {\\n        __doc__: {\\n          todo_1: {\\n            done: false,\\n            title: 'Buy milk',\\n          },\\n        },\\n      },\\n    },\\n  }\\n\\n  const firebase = new MockFirebase(fixtureData)\\n\\n  const schema = gql`\\n    type Todo @firestore {\\n      title: String!\\n      done: Boolean!\\n    }\\n  `\\n  return (\\n    <BrowserqlProvider\\n      schema={schema}\\n      scalars={{ JSON: JSONResolver }}\\n      extensions={[\\n        connectFirestoreql(firebase.firestore(), schema),\\n        {\\n          schema: gql`\\n            scalar JSON\\n          `,\\n        },\\n      ]}\\n    >\\n      <div style={{ height: 600 }}>\\n        <GraphiQL\\n          graphiqlProps={{\\n            query: `query GetManyTodo(\\n  $where: [FirestoreWhere]\\n  $filters: FirestoreFilters\\n) {\\n  firestore_getMany_Todo(\\n    where: $where\\n    filters: $filters\\n  ) {\\n    id\\n    title\\n    done\\n  }\\n}\\n`,\\n            response: JSON.stringify(\\n              {\\n                data: {\\n                  firestore_getMany_Todo: [\\n                    {\\n                      id: 'todo_1',\\n                      title: 'Buy milk',\\n                      done: false,\\n                      __typename: 'Todo',\\n                    },\\n                  ],\\n                },\\n                loading: false,\\n                networkStatus: 7,\\n                stale: false,\\n              },\\n              null,\\n              2\\n            ),\\n            variables: JSON.stringify({}, null, 2),\\n          }}\\n        />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nTryIt.height = 900\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"firestore\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"tryit.tsx\",\n        \"source\": \"import React from 'react'\\nimport gql from 'graphql-tag'\\nimport { BrowserqlProvider } from '@browserql/react'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport { connect as connectFirestoreql } from '@browserql/firestore'\\nimport GraphiQL from '@browserql/graphiql'\\nimport MockFirebase from 'mock-cloud-firestore'\\n\\nexport default function TryIt() {\\n  const fixtureData = {\\n    __collection__: {\\n      users: {\\n        __doc__: {\\n          user_a: {\\n            age: 15,\\n            username: 'user_a',\\n          },\\n        },\\n      },\\n      Todo: {\\n        __doc__: {\\n          todo_1: {\\n            done: false,\\n            title: 'Buy milk',\\n          },\\n        },\\n      },\\n    },\\n  }\\n\\n  const firebase = new MockFirebase(fixtureData)\\n\\n  const schema = gql`\\n    type Todo @firestore {\\n      title: String!\\n      done: Boolean!\\n    }\\n  `\\n  return (\\n    <BrowserqlProvider\\n      schema={schema}\\n      scalars={{ JSON: JSONResolver }}\\n      extensions={[\\n        connectFirestoreql(firebase.firestore(), schema),\\n        {\\n          schema: gql`\\n            scalar JSON\\n          `,\\n        },\\n      ]}\\n    >\\n      <div style={{ height: 600 }}>\\n        <GraphiQL\\n          graphiqlProps={{\\n            query: `query GetManyTodo(\\n  $where: [FirestoreWhere]\\n  $filters: FirestoreFilters\\n) {\\n  firestore_getMany_Todo(\\n    where: $where\\n    filters: $filters\\n  ) {\\n    id\\n    title\\n    done\\n  }\\n}\\n`,\\n            response: JSON.stringify(\\n              {\\n                data: {\\n                  firestore_getMany_Todo: [\\n                    {\\n                      id: 'todo_1',\\n                      title: 'Buy milk',\\n                      done: false,\\n                      __typename: 'Todo',\\n                    },\\n                  ],\\n                },\\n                loading: false,\\n                networkStatus: 7,\\n                stale: false,\\n              },\\n              null,\\n              2\\n            ),\\n            variables: JSON.stringify({}, null, 2),\\n          }}\\n        />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nTryIt.height = 900\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fragments",
    "name": "usage",
    "bundle": "Generate fragments from types (_GraphQL_)\n\n#### Example\n\nLet's take a `GraphQL` schema\n\n```graphql\ntype Post {\n  title: String!\n  author: Author!\n}\n\ntype Author {\n  name: String!\n  email: String\n}\n```\n\nNow let's import it along with our fragment builder\n\n```javascript\nimport schema from './schema.graphql'\nimport { buildFragment } from '@browserql/fragments'\n```\n\nYou can now build a fragment specifying the target type\n\n```javascript\nbuildFragment(schema, 'Author')\n```\n\nWhich will generate the following string:\n\n```snapshot2\nFragments.Example\n```\n\n#### Code sandbox\n\n```sandbox\nfragments-cnwol\n```\n\n#### API\n\nThis is the `Typescript` signature of the `buildFragment` function:\n\n```typescript\nbuildFragment(\n  schema: graphql.DocumentNode\n  type: string\n  options?: {\n    saveAs?: string\n    select?: string[]\n  }\n): string\n```\n\n#### Saving as\n\nBy default, the name of the new fragment is the type's name suffixed by `Fragment`\n\n```graphql\ntype Foo {\n  name: String\n}\n```\n\n```javascript\nbuildFragment(schema, 'Foo')\n```\n\n```snapshot2\nFragments.DefaultName\n```\n\nNotice here the fragment is named `FooFragment` after the type `Foo`.\n\nYou can override this using the `saveAs` property\n\n```javascript\nbuildFragment(schema, 'Foo', { saveAs: 'MyFragment' })\n```\n\n```snapshot2\nFragments.SaveAs\n```\n\n#### Nested fragments\n\nNote that if the type is using other types, it will also build fragments for these types:\n\n```javascript\nbuildFragment(schema, 'Post')\n```\n\nWhich will generate the following string:\n\n```snapshot2\nFragments.Nested\n```\n\n#### Field selection\n\nYou can also select the fields:\n\n```javascript\nbuildFragment(schema, 'Post', {\n  select: ['title'],\n})\n```\n\n```snapshot2\nFragments.Select\n```\n\n#### Nested field selection\n\nYou can use dot notation to reach nested fields\n\n```graphql\ntype Recording {\n  name: String\n  settings: RecordingSettings\n}\n\ntype RecordingSettings {\n  name: String\n  audioConfiguration: AudioConfiguration\n}\n\ntype AudioConfiguration {\n  name: String\n  encoder: Encoder\n}\n\nenum Encoder {\n  mp3\n  wav\n}\n```\n\n```javascript\nbuildFragment(schema, 'Recording', {\n  select: ['settings.audioConfiguration.encoder'],\n})\n```\n\n```snapshot2\nFragments.InnerSelect\n```\n\n#### Errors\n\nIf the target type does not exist, it will throw an error\n\n```graphql\ntype Foo {\n  id: ID\n}\n```\n\n```javascript\nbuildFragment(schema, 'Bar')\n```\n\n```snapshot2\nFragments.NoSuchTypeError\n```\n\n##### Nested type missing\n\nIt will **NOT** throw if a nested type is missing. Instead, it would assume it is a scalar\n\n```graphql\ntype Foo {\n  bar: Bar\n}\n```\n\n```javascript\nbuildFragment(schema, 'Foo')\n```\n\n```snapshot2\nFragments.NoSuchNestedType\n```\n"
  },
  {
    "module": "graphiql",
    "name": "usage",
    "bundle": "# GraphiQL\n\n`browserql` implementation for [GraphiQL](http://graphiql.com)\n\n## Usage\n\n```graphql\ntype Query {\n  sayHello(to: String!): String!\n}\n\ntype Mutation {\n  sayByeTo(to: String!): String!\n}\n```\n\n```javascript\nimport { BrowserqlProvider } from '@browserql/schema'\nimport GraphiQL from '@browserql/graphiql'\n\nfunction Provider() {\n  return (\n    <BrowserqlProvider schema={schema} queries={queries}>\n      <GraphiQL />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import GraphiQL from '@browserql/graphiql'\\nimport { BrowserqlProvider } from '@browserql/react'\\nimport * as React from 'react'\\nimport gql from 'graphql-tag'\\n\\nexport default function Example() {\\n  const schema = gql`\\n    type Query {\\n      sayHello(to: String!): String!\\n    }\\n\\n    type Mutation {\\n      sayByeTo(to: String!): String!\\n    }\\n  `\\n\\n  const queries = {\\n    sayHello({ to }: { to: string }) {\\n      return `hello ${to}`\\n    },\\n  }\\n\\n  const mutations = {\\n    sayByeTo({ to }: { to: string }) {\\n      return `bye ${to}`\\n    },\\n  }\\n\\n  return (\\n    <BrowserqlProvider schema={schema} queries={queries} mutations={mutations}>\\n      <div\\n        style={{\\n          position: 'relative',\\n          height: 700,\\n        }}\\n      >\\n        <GraphiQL\\n          graphiqlProps={{\\n            defaultQuery: '{ sayHello(to: \\\"everybody\\\") }',\\n            defaultSecondaryEditorOpen: true,\\n            headerEditorEnabled: true,\\n            response: `{\\n  \\\"data\\\": {\\n    \\\"sayHello\\\": \\\"hello everybdoy\\\"\\n  },\\n  \\\"loading\\\": false,\\n  \\\"networkStatus\\\": 7,\\n  \\\"stale\\\": false\\n}\\n            `,\\n          }}\\n        />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 900\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"graphiql\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import GraphiQL from '@browserql/graphiql'\\nimport { BrowserqlProvider } from '@browserql/react'\\nimport * as React from 'react'\\nimport gql from 'graphql-tag'\\n\\nexport default function Example() {\\n  const schema = gql`\\n    type Query {\\n      sayHello(to: String!): String!\\n    }\\n\\n    type Mutation {\\n      sayByeTo(to: String!): String!\\n    }\\n  `\\n\\n  const queries = {\\n    sayHello({ to }: { to: string }) {\\n      return `hello ${to}`\\n    },\\n  }\\n\\n  const mutations = {\\n    sayByeTo({ to }: { to: string }) {\\n      return `bye ${to}`\\n    },\\n  }\\n\\n  return (\\n    <BrowserqlProvider schema={schema} queries={queries} mutations={mutations}>\\n      <div\\n        style={{\\n          position: 'relative',\\n          height: 700,\\n        }}\\n      >\\n        <GraphiQL\\n          graphiqlProps={{\\n            defaultQuery: '{ sayHello(to: \\\"everybody\\\") }',\\n            defaultSecondaryEditorOpen: true,\\n            headerEditorEnabled: true,\\n            response: `{\\n  \\\"data\\\": {\\n    \\\"sayHello\\\": \\\"hello everybdoy\\\"\\n  },\\n  \\\"loading\\\": false,\\n  \\\"networkStatus\\\": 7,\\n  \\\"stale\\\": false\\n}\\n            `,\\n          }}\\n        />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 900\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "input",
    "name": "example",
    "bundle": "Transform a `GraphQL` type to a `GraphQL` input.\n\n```graphql\ntype Author {\n  name: String!\n  email: String\n}\n```\n"
  },
  {
    "module": "typescript-generator",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\\nimport gents, { NULL_STRATEGY } from '@browserql/typescript-generator'\\nimport gql from 'graphql-tag'\\nimport Code from '../Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport Typography from '@material-ui/core/Typography'\\nimport FormGroup from '@material-ui/core/FormGroup'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport Switch from '@material-ui/core/Switch'\\nimport FormControl from '@material-ui/core/FormControl'\\nimport InputLabel from '@material-ui/core/InputLabel'\\nimport Select from '@material-ui/core/Select'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Paper from '@material-ui/core/Paper'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\\n\\nexport default function TryIt() {\\n  const [graphqlCode, setGraphqlCode] = useState(`type User {\\n  name: String!\\n  age: Int\\n  id: ID!\\n}\\n  `)\\n  const [tsCode, setTsCode] = useState(`interface User {\\n  name: string\\n  age: number | null\\n  id: string | number\\n}\\n  `)\\n  const [useExport, setUseExport] = useState(false)\\n  const [useDeclare, setUseDeclare] = useState(false)\\n  const [ID, setID] = useState('string | number')\\n  const [nullStrategy, setNullStrategy] = useState<NULL_STRATEGY[]>([\\n    NULL_STRATEGY.null,\\n  ])\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  useEffect(() => {\\n    try {\\n      setError(undefined)\\n      setTsCode(\\n        gents(gql(graphqlCode), {\\n          useExport,\\n          useDeclare,\\n          ID,\\n          null: nullStrategy,\\n        })\\n      )\\n    } catch (error) {\\n      setError(error)\\n    }\\n  }, [useExport, graphqlCode, useDeclare, ID, nullStrategy])\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const { value } = e.target\\n    setGraphqlCode(value)\\n  }\\n\\n  const handleUseExport = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseExport(!useExport)\\n    },\\n    [useExport]\\n  )\\n\\n  const handleUseDeclare = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseDeclare(!useDeclare)\\n    },\\n    [useDeclare]\\n  )\\n\\n  const handleID = useCallback((e: ChangeEvent<HTMLInputElement>) => {\\n    setID(e.target.value)\\n  }, [])\\n\\n  const handleNull = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\\n    setNullStrategy((e.target.value as unknown) as NULL_STRATEGY[])\\n  }, [])\\n\\n  console.log({ nullStrategy })\\n\\n  return (\\n    <div style={{ padding: 16 }}>\\n      <Accordion\\n        elevation={0}\\n        defaultExpanded\\n        style={{ marginBottom: 22, borderBottom: '1px solid #eee' }}\\n      >\\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\\n          <Typography variant=\\\"h5\\\">Options</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <Paper\\n            style={{ padding: 12, backgroundColor: '#eee', flex: 1 }}\\n            elevation={0}\\n          >\\n            <FormGroup row style={{ justifyContent: 'center' }}>\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useExport}\\n                    onChange={handleUseExport}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use export\\\"\\n              />\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useDeclare}\\n                    onChange={handleUseDeclare}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use declare\\\"\\n              />\\n              <TextField\\n                id=\\\"outlined-basic\\\"\\n                label=\\\"ID\\\"\\n                variant=\\\"outlined\\\"\\n                value={ID}\\n                style={{ width: 150 }}\\n                onChange={handleID}\\n              />\\n              <FormControl variant=\\\"filled\\\" style={{ marginLeft: 12 }}>\\n                <InputLabel id=\\\"demo-simple-select-filled-label\\\">\\n                  Nullable\\n                </InputLabel>\\n                <Select\\n                  labelId=\\\"demo-simple-select-filled-label\\\"\\n                  id=\\\"demo-simple-select-filled\\\"\\n                  value={nullStrategy}\\n                  onChange={handleNull}\\n                  multiple\\n                >\\n                  <MenuItem value=\\\"null\\\">null</MenuItem>\\n                  <MenuItem value=\\\"undefined\\\">undefined</MenuItem>\\n                  <MenuItem value=\\\"missing\\\">missing</MenuItem>\\n                </Select>\\n              </FormControl>\\n            </FormGroup>\\n          </Paper>\\n        </AccordionDetails>\\n      </Accordion>\\n\\n      <div style={{ display: 'flex', gap: 12, marginBottom: 32 }}>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\">GraphQL input</Typography>\\n        </div>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\" align=\\\"right\\\">\\n            Typescript output\\n          </Typography>\\n        </div>\\n      </div>\\n\\n      <div style={{ display: 'flex', gap: 12 }}>\\n        <div style={{ flex: 1 }}>\\n          <TextField\\n            multiline\\n            fullWidth\\n            rows={20}\\n            value={graphqlCode}\\n            onChange={handleChange}\\n            variant=\\\"filled\\\"\\n            InputProps={{\\n              style: {\\n                fontWeight: 'bold',\\n              },\\n            }}\\n          />\\n        </div>\\n        <div\\n          style={{\\n            flex: 1,\\n            border: '2px solid #ddd',\\n            borderRadius: 6,\\n            padding: 8,\\n          }}\\n        >\\n          {error && (\\n            <div>\\n              <Typography>{error.message}</Typography>\\n            </div>\\n          )}\\n          {!error && <pre>{tsCode}</pre>}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nTryIt.height = 800\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"typescript-generator\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\\nimport gents, { NULL_STRATEGY } from '@browserql/typescript-generator'\\nimport gql from 'graphql-tag'\\nimport Code from '../Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport Typography from '@material-ui/core/Typography'\\nimport FormGroup from '@material-ui/core/FormGroup'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport Switch from '@material-ui/core/Switch'\\nimport FormControl from '@material-ui/core/FormControl'\\nimport InputLabel from '@material-ui/core/InputLabel'\\nimport Select from '@material-ui/core/Select'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Paper from '@material-ui/core/Paper'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\\n\\nexport default function TryIt() {\\n  const [graphqlCode, setGraphqlCode] = useState(`type User {\\n  name: String!\\n  age: Int\\n  id: ID!\\n}\\n  `)\\n  const [tsCode, setTsCode] = useState(`interface User {\\n  name: string\\n  age: number | null\\n  id: string | number\\n}\\n  `)\\n  const [useExport, setUseExport] = useState(false)\\n  const [useDeclare, setUseDeclare] = useState(false)\\n  const [ID, setID] = useState('string | number')\\n  const [nullStrategy, setNullStrategy] = useState<NULL_STRATEGY[]>([\\n    NULL_STRATEGY.null,\\n  ])\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  useEffect(() => {\\n    try {\\n      setError(undefined)\\n      setTsCode(\\n        gents(gql(graphqlCode), {\\n          useExport,\\n          useDeclare,\\n          ID,\\n          null: nullStrategy,\\n        })\\n      )\\n    } catch (error) {\\n      setError(error)\\n    }\\n  }, [useExport, graphqlCode, useDeclare, ID, nullStrategy])\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const { value } = e.target\\n    setGraphqlCode(value)\\n  }\\n\\n  const handleUseExport = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseExport(!useExport)\\n    },\\n    [useExport]\\n  )\\n\\n  const handleUseDeclare = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseDeclare(!useDeclare)\\n    },\\n    [useDeclare]\\n  )\\n\\n  const handleID = useCallback((e: ChangeEvent<HTMLInputElement>) => {\\n    setID(e.target.value)\\n  }, [])\\n\\n  const handleNull = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\\n    setNullStrategy((e.target.value as unknown) as NULL_STRATEGY[])\\n  }, [])\\n\\n  console.log({ nullStrategy })\\n\\n  return (\\n    <div style={{ padding: 16 }}>\\n      <Accordion\\n        elevation={0}\\n        defaultExpanded\\n        style={{ marginBottom: 22, borderBottom: '1px solid #eee' }}\\n      >\\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\\n          <Typography variant=\\\"h5\\\">Options</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <Paper\\n            style={{ padding: 12, backgroundColor: '#eee', flex: 1 }}\\n            elevation={0}\\n          >\\n            <FormGroup row style={{ justifyContent: 'center' }}>\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useExport}\\n                    onChange={handleUseExport}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use export\\\"\\n              />\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useDeclare}\\n                    onChange={handleUseDeclare}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use declare\\\"\\n              />\\n              <TextField\\n                id=\\\"outlined-basic\\\"\\n                label=\\\"ID\\\"\\n                variant=\\\"outlined\\\"\\n                value={ID}\\n                style={{ width: 150 }}\\n                onChange={handleID}\\n              />\\n              <FormControl variant=\\\"filled\\\" style={{ marginLeft: 12 }}>\\n                <InputLabel id=\\\"demo-simple-select-filled-label\\\">\\n                  Nullable\\n                </InputLabel>\\n                <Select\\n                  labelId=\\\"demo-simple-select-filled-label\\\"\\n                  id=\\\"demo-simple-select-filled\\\"\\n                  value={nullStrategy}\\n                  onChange={handleNull}\\n                  multiple\\n                >\\n                  <MenuItem value=\\\"null\\\">null</MenuItem>\\n                  <MenuItem value=\\\"undefined\\\">undefined</MenuItem>\\n                  <MenuItem value=\\\"missing\\\">missing</MenuItem>\\n                </Select>\\n              </FormControl>\\n            </FormGroup>\\n          </Paper>\\n        </AccordionDetails>\\n      </Accordion>\\n\\n      <div style={{ display: 'flex', gap: 12, marginBottom: 32 }}>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\">GraphQL input</Typography>\\n        </div>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\" align=\\\"right\\\">\\n            Typescript output\\n          </Typography>\\n        </div>\\n      </div>\\n\\n      <div style={{ display: 'flex', gap: 12 }}>\\n        <div style={{ flex: 1 }}>\\n          <TextField\\n            multiline\\n            fullWidth\\n            rows={20}\\n            value={graphqlCode}\\n            onChange={handleChange}\\n            variant=\\\"filled\\\"\\n            InputProps={{\\n              style: {\\n                fontWeight: 'bold',\\n              },\\n            }}\\n          />\\n        </div>\\n        <div\\n          style={{\\n            flex: 1,\\n            border: '2px solid #ddd',\\n            borderRadius: 6,\\n            padding: 8,\\n          }}\\n        >\\n          {error && (\\n            <div>\\n              <Typography>{error.message}</Typography>\\n            </div>\\n          )}\\n          {!error && <pre>{tsCode}</pre>}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nTryIt.height = 800\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "executable",
    "name": "usage",
    "bundle": "Tired of writing executable queries/mutations from schema queries/mutations and make sure they stay in-sync? This library generates them for you on the fly directly from the schema.\n\n## Example\n\nImagine you have the following `GraphQL` schema:\n\n```graphql\ntype User {\n  id: ID!\n  email: String!\n}\n\ntype Query {\n  getUser(id: ID!): User\n}\n\ntype Mutation {\n  addUser(email: String!): User!\n}\n```\n\nThis is how you would generate an executable query from it:\n\n```javascript\nimport { makeExecutableQuery } from '@browserql/executable'\nimport { SCHEMA } from '../loaders'\n\nexport default makeExecutableQuery(SCHEMA, 'getUser')\n```\n\nAnd this is the query it returns:\n\n```react\n{\n  \"file\": {\n    \"name\": \"query.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport QUERY from './query.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(QUERY)} />\\n}\\n\\nApp.height = 320\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"executable\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"mutation.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport MUTATION from './mutation.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(MUTATION)} />\\n}\\n\\nApp.height = 400\\n\"\n      },\n      {\n        \"name\": \"query.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport QUERY from './query.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(QUERY)} />\\n}\\n\\nApp.height = 320\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type User {\\n  id: ID!\\n  email: String!\\n}\\n\\ntype Query {\\n  getUser(id: ID!): User\\n}\\n\\ntype Mutation {\\n  addUser(email: String!): User!\\n}\\n\"\n      },\n      {\n        \"name\": \"mutation.mjs\",\n        \"source\": \"import { makeExecutableMutation } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableMutation(SCHEMA, 'addUser')\\n\",\n        \"result\": \"\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { makeExecutableQuery } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableQuery(SCHEMA, 'getUser')\\n\",\n        \"result\": \"\"\n      }\n    ]\n  }\n}\n```\n\nThis is how you would generate an executable mutation from it:\n\n```javascript\nimport { makeExecutableMutation } from '@browserql/executable'\nimport { SCHEMA } from '../loaders'\n\nexport default makeExecutableMutation(SCHEMA, 'addUser')\n```\n\nAnd this is the mutation it returns:\n\n```react\n{\n  \"file\": {\n    \"name\": \"mutation.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport MUTATION from './mutation.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(MUTATION)} />\\n}\\n\\nApp.height = 400\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"executable\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"mutation.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport MUTATION from './mutation.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(MUTATION)} />\\n}\\n\\nApp.height = 400\\n\"\n      },\n      {\n        \"name\": \"query.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport QUERY from './query.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(QUERY)} />\\n}\\n\\nApp.height = 320\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type User {\\n  id: ID!\\n  email: String!\\n}\\n\\ntype Query {\\n  getUser(id: ID!): User\\n}\\n\\ntype Mutation {\\n  addUser(email: String!): User!\\n}\\n\"\n      },\n      {\n        \"name\": \"mutation.mjs\",\n        \"source\": \"import { makeExecutableMutation } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableMutation(SCHEMA, 'addUser')\\n\",\n        \"result\": \"\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { makeExecutableQuery } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableQuery(SCHEMA, 'getUser')\\n\",\n        \"result\": \"\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getArgument",
    "bundle": "Get node's argument by name.\n\nYou need to pass it a name, which will return you a function that you call with the target node\n\n#### Get directive's argument\n\nConsider this schema:\n\n```graphql\ntype A @foo(bar: 24) {\n  id: ID!\n}\n```\n\nLet's say we want to retrieve the directive argument named `bar`.\n\nWe'll do it like this:\n\n```javascript\nimport { getArgument, getType, getDirective } from '@browserql/fpql'\nimport fp from '@browserql/fp'\nimport { SCHEMA } from '../loaders'\n\nexport default fp(SCHEMA)(\n  // Get type named A\n  getType('A'),\n  // Get in that type directive named foo\n  getDirective('foo'),\n  // Get in that directive argument named bar\n  getArgument('bar')\n)\n```\n\nWhich will return the following argument node:\n\n```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './directive.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 460\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArgument\",\n    \"files\": [\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type A @foo(bar: 24) {\\n  id: ID!\\n}\\n\"\n      },\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './directive.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 460\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArgument, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default fp(SCHEMA)(\\n  // Get type named A\\n  getType('A'),\\n  // Get in that type directive named foo\\n  getDirective('foo'),\\n  // Get in that directive argument named bar\\n  getArgument('bar')\\n)\\n\",\n        \"result\": \"\"\n      }\n    ]\n  }\n}\n```\n"
  }
]
