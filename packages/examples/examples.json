[
  {
    "module": "firestore-react",
    "name": "about",
    "bundle": "```snapshot2\nFirestoreReact.TryIt\n```\n\n## Components\n\n```jsx\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { build, set } from '@browserql/firestore'\nimport { BrowserqlProvider } from '@browserql/react'\nimport { Firestoreql } from '@browserql/firestore-react'\n\nfunction Todos() {\n  return (\n    <Firestoreql get=\"Todo\" limit={10}>\n      {(todos) => (\n        <ul>\n          {todos.map((todo) => (\n            <Todo key={todo.id} todo={todo} />\n          ))}\n        </ul>\n      )}\n    </Firestoreql>\n  )\n}\n\nfunction Todo({ todo }) {\n  return (\n    <li>\n      <Firestoreql update=\"Todo\">\n        {(update) => (\n          <input\n            type=\"checkbox\"\n            checked={false}\n            onChange={() => update(set('done').to(true))}\n          />\n        )}\n      </Firestoreql>\n      {todo.name}\n    </li>\n  )\n}\n\nfunction AddTodo() {\n  const [name, setName] = React.useState('')\n  return (\n    <>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <Firestoreql add=\"Todo\">\n        {(add) => <button onClick={() => add({ name })}>Add</button>}\n      </Firestoreql>\n    </>\n  )\n}\n\nrender(\n  <BrowserqlProvider {...build(db, schema)}>\n    <AddTodo />\n    <Todos />\n  </BrowerqlProvider>\n)\n```\n\n### Properties\n\n| Prop                                           | Description                                                                      | Type                                                                              | Example                                                                        |\n| ---------------------------------------------- | -------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------ |\n| **get** \\| **add** \\| **update** \\| **remove** | Put here the name of a type that has been tagged with the directive `@firestore` | `string`                                                                          | `<Firestoreql get=\"User\" />`                                                   |\n| **children**                                   | View below                                                                       | `<D = unknown>(data: D, info: { loading: boolean, error?: Error }): ReactElement` | `<Firestoreql get=\"User\" first>{user => <div>{user.name}</div>}</Firestoreql>` |\n| **where**                                      | View below                                                                       | `Where[]`                                                                         | `<Firestoreql get=\"User\" where={[where('email').equals(email)]} />`            |\n| **orderBy**                                    | View below                                                                       | `string`                                                                          | `<Firestoreql get=\"User\" orderBy=\"createdAt\" />`                               |\n| **asc**                                        | View below                                                                       | `boolean`                                                                         | `<Firestoreql get=\"User\" asc={false} />`                                       |\n\n## With HOC\n\n```javascript\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { flow } from 'lodash'\nimport { build, set } from '@browserql/firestore'\nimport { BrowserqlProvider } from '@browserql/react'\nimport { withFirestoreql } from '@browserql/firestore-react'\n\nfunction TodosView({ getTodo, updateTodo, addTodo }) {\n  const [name, setName] = React.useState('')\n\n  if (getTodo.loading) {\n    return <div>Loading</div>\n  }\n\n  return (\n    <>\n      <ul>\n        {getTodo.data.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={false}\n              onChange={() => updateTodo.exec(set('done').to(true))}\n            />\n            {todo.name}\n          </li>\n        ))}\n      </ul>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button onClick={() => addTodo.exec({ name })}>Add</button>\n    </>\n  )\n}\n\nconst Todos = flow(\n  withFirestore.get('Todo'),\n  withFirestore.update('Todo'),\n  withFirestore.add('Todo')\n)(TodosView)\n\nrender(\n  <BrowserqlProvider {...build(db, schema)}>\n    <Todos />\n  </BrowerqlProvider>\n)\n```\n\n## With Hooks\n\n```javascript\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { build, set } from '@browserql/firestore'\nimport { BrowserqlProvider } from '@browserql/react'\nimport { useFirestoreql } from '@browserql/firestore-react'\n\nfunction Todos() {\n  const [name, setName] = React.useState('')\n  const [todos] = useFirestoreql.get('Todo')\n  const [updateTodo] = useFirestoreql.update('Todo')\n  const [addTodo] = useFirestoreql.add('Todo')\n\n  return (\n    <>\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={false}\n              onChange={() => updateTodo(set('done').to(true))}\n            />\n            {todo.name}\n          </li>\n        ))}\n      </ul>\n      <input value={name} onChange={(e) => setName(e.target.value)} />\n      <button onClick={() => addTodo({ name })}>Add</button>\n    </>\n  )\n}\n\nrender(\n  <BrowserqlProvider {...build(db, schema)}>\n    <Todos />\n  </BrowerqlProvider>\n)\n```\n"
  },
  {
    "module": "graphql-project",
    "name": "usage",
    "bundle": "## Install\n\n```bash\nnpm install --global @browserql/graphql-project\n```\n\n## Init\n\nInit a new graphql project.\n\n```bash\ngraphql init\n```\n\n## Schema\n\nView schema\n\n```bash\ngraphql\n```\n"
  },
  {
    "module": "cache",
    "name": "increment",
    "bundle": ""
  },
  {
    "module": "cache",
    "name": "set",
    "bundle": "set\n"
  },
  {
    "module": "cache",
    "name": "multiply",
    "bundle": ""
  },
  {
    "module": "cache",
    "name": "toggle",
    "bundle": ""
  },
  {
    "module": "client",
    "name": "error-handling",
    "bundle": ""
  },
  {
    "module": "client",
    "name": "extensions",
    "bundle": ""
  },
  {
    "module": "client",
    "name": "quick-start",
    "bundle": "Create a GraphQL server in the browser\n\n```sandbox\nmystifying-frost-qwhsj\n```\n\n```javascript\nimport connect from '@browserql/client'\nimport gql from 'graphql-tag'\nimport cacheql from '@browserql/cache'\n\n// Define your GraphQL schema\nconst schema = gql`\n  type Query {\n    getCounter: Int!\n  }\n\n  type Mutation {\n    incrementCounter: Boolean!\n  }\n`\n\nconst GET_COUNTER = buildQuery(schema, 'getCounter')\nconst INCREMENT_COUNTER = buildMutation(schema, 'incrementCounter')\n\n// Define your queries resolvers\nconst queries = {\n  getCounter() {\n    return 0\n  },\n}\n\n// Define your mutations resolvers\nconst mutations = {\n  incrementCounter(_variables, ctx) {\n    const {\n      context: { cache },\n      schema,\n    } = ctx.browserqlClient\n    cache.increment(GET_COUNTER)\n    return true\n  },\n}\n\n// The query as used by the FE\nconst query = gql`\n  query {\n    getCounter\n  }\n`\n\n// The mutation as used by the FE\nconst mutation = gql`\n  mutation {\n    incrementCounter\n  }\n`\n\n// Create a new browserql client\nconst { client } = connect({ schema, queries, mutations })\n\n// You can now access queries\nasync function getCounter() {\n  const { data } = await client.query({ query })\n  return data.getCounter\n}\n\n// And mutations\nasync function incrementCounter() {\n  await client.mutate({ mutation })\n}\n\n// Forever increment counter every n seconds\nasync function demo(seconds = 5) {\n  const counter = await getCounter()\n  document.writeln('<p>Counter: '.concat(counter).concat('</p>'))\n  document.writeln(`<p>Waiting ${seconds} seconds...</p>`)\n  await new Promise((resolve) => setTimeout(resolve, seconds * 1000))\n  document.writeln('<p>Incrementing counter...</p>')\n  await incrementCounter()\n  await demo(seconds)\n}\n\ndemo(2.5).catch(console.error)\n```\n"
  },
  {
    "module": "executable",
    "name": "make-executable-mutation",
    "bundle": ""
  },
  {
    "module": "executable",
    "name": "make-executable-query",
    "bundle": ""
  },
  {
    "module": "executable",
    "name": "utils",
    "bundle": ""
  },
  {
    "module": "firestore",
    "name": "about",
    "bundle": "Use GraphQL with Firestore directly in your front-end apps\n\n```snapshot2\nFirestore.TryIt\n```\n\n#### Usage\n\nFirst define your model:\n\n```graphql\n# defs.graphql\ntype Todo @firestore {\n  name: String!\n  done: Boolean! @default(value: false)\n  doneTime: FirestoreTimestamp\n}\n```\n\n_Note the use of the `@firestore` directive: it means this type represents a firestore collection._\n\nThen create your firebase app:\n\n```javascript\n// db.js\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst config = {\n  apiKey: 'xxx',\n  projectId: 'xxx',\n  appId: 'xxx',\n  authDomain: 'xxx',\n}\n\nfirebase.initializeApp(config)\n\nexport default firebase.firestore()\n```\n\nYou can now generate your executable GraphQL schema\n\n```javascript\nimport { build } from '@browserql/firestore'\nimport defs from './defs.graphql'\nimport db from './db'\n\nconst { schema, queries, mutations } = build(db, defs)\n```\n\nConnect it to browserql\n\n```javascript\nimport connect from '@browserql/client'\nimport { connect as connectFirestoreql } from '@browserql/firestore'\n\nconst { client } = connect(connectFirestoreql(db, defs))\n```\n\nThat's it! You can now use our helpers to construct your queries and mutations\n\n```javascript\nimport { add, get, where, orderBy } from '@browserql/firestore'\n\nawait client.query(\n  get(\n    defs,\n    'Todo',\n    where('done').equals(true),\n    where('doneTime').isLesserThan(new Date()),\n    orderBy('doneTime')\n  )\n)\n\nawait client.mutate(add('Todo', { name: 'Buy milk' }))\n```\n\nYou can also use it with react:\n\n```javascript\nimport { Firestoreql } from '@browserql/firestore-react'\n\nfunction Todos() {\n  return (\n    <ul>\n      <Firestoreql each=\"Todo\" limit={100} orderBy=\"createdDate\" asc={false}>\n        {(todo) => (\n          <li>\n            <Firestoreql toggle=\"Todo.done\">\n              {(toggle, { loading }) => (\n                <input\n                  type=\"checkbox\"\n                  checked={todo.done}\n                  onChange={toggle}\n                  disabled={loading}\n                />\n              )}\n            </Firestoreql>\n            <strong>{todo.title}</strong>\n          </li>\n        )}\n      </Firestoreql>\n    </ul>\n  )\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getExecutableQueries",
    "bundle": "Get queries from an executable query\n\n```javascript\nimport { getExecutableQueries } from '@browserql/fpql'\n```\n\n```graphql\nquery {\n  query1\n\n  query2\n}\n```\n\n```javascript\ngetExecutableQueries(schema)\n```\n\n```snapshot2\nFPQL.WithQueryExample\n```\n\n## Support multiple operations\n\n```graphql\nquery Query1 {\n  query1\n}\n\nmutation Mutation1 {\n  mutation1\n}\n\nquery Query2 {\n  query2\n}\n```\n\n```javascript\ngetExecutableQueries(schema)\n```\n\n```snapshot2\nFPQL.WithMultipleQueriesExample\n```\n"
  },
  {
    "module": "fpql",
    "name": "getField",
    "bundle": ""
  },
  {
    "module": "fpql",
    "name": "getName",
    "bundle": "Get the name of any GraphQL node\n\n```javascript\nimport { getName } from '@browserql/fpql'\n```\n\n```graphql\ntype A {\n  id: ID!\n}\n```\n\n```javascript\ngetTypes(schema).map(getName)\n```\n\n```snapshot2\nFPQL.GetTypesNames\n```\n"
  },
  {
    "module": "fpql",
    "name": "getScalar",
    "bundle": "Get schema's scalar by name\n\n```javascript\nimport { getScalars } from '@browserql/fpql'\n```\n\n```graphql\nscalar EmailAddress\n\ntype User {\n  email: EmailAddress\n}\n```\n\n```javascript\ngetScalar('EmailAddress')(schema)\n```\n\n```snapshot2\nFPQL.GetScalar\n```\n"
  },
  {
    "module": "fpql",
    "name": "getScalars",
    "bundle": "Get schema's scalars\n\n```javascript\nimport { getScalars } from '@browserql/fpql'\n```\n\n```graphql\nscalar EmailAddress\n\ntype User {\n  email: EmailAddress\n}\n```\n\n```javascript\ngetScalars(schema)\n```\n\n```snapshot2\nFPQL.GetScalars\n```\n"
  },
  {
    "module": "fpql",
    "name": "getSelections",
    "bundle": "Get executable operation's selections\n\n```graphql\nquery GetUser($id: ID!) {\n  getUser(id: $id) {\n    id\n    email\n  }\n}\n```\n\n```javascript\nimport { getExecutableQuery, getSelections } from '@browserql/fpql'\nimport fp from '@browserql/fp'\n\nfp(schema)(getExecutableQuery('GetUser'), getSelections)\n```\n"
  },
  {
    "module": "fpql",
    "name": "getTypes",
    "bundle": "Get all types from a schema\n\n```javascript\nimport { getTypes } from '@browserql/fpql'\n```\n\n```graphql\ntype A {\n  id: ID\n}\n\ntype B {\n  id: ID\n}\n```\n\n```javascript\ngetTypes(schema).map(getName)\n```\n\n```snapshot\nFPQL.GetTypes\n```\n"
  },
  {
    "module": "fpql",
    "name": "group",
    "bundle": "Group extensions together\n\n```javascript\nimport { group } from '@browserql/fpql'\n```\n\n```graphql\ntype Query {\n  a: Int\n}\n\nextend type Query {\n  b: Int\n}\n```\n\n```javascript\ngroup(schema)\n```\n\n```snapshot\nFPQL.Group\n```\n"
  },
  {
    "module": "fpql",
    "name": "merge",
    "bundle": "Merge different schemas together\n\n## Identical types\n\nIdentical types will be extended\n\n```javascript\nimport { merge } from '@browserql/fpql'\n```\n\n```graphql\n# A.graphql\ntype Query {\n  id: ID\n}\n```\n\n```graphql\n# B.graphql\ntype Query {\n  foo: ID\n}\n```\n\n```javascript\nmerge(A, B)\n```\n\n```snapshot\nFPQL.MergeExtendExistingTypes\n```\n\n## Extending unknown type\n\nExtending an unknown type will cause the extension to be removed\n\n```javascript\nimport { merge } from '@browserql/fpql'\n```\n\n```graphql\nextend type Query {\n  id: ID\n}\n```\n\n```javascript\nmerge(schema)\n```\n\n```snapshot\nFPQL.MergeRemoveExtension\n```\n"
  },
  {
    "module": "fpql",
    "name": "parseKind",
    "bundle": "Parse a kind string into an object like this:\n\n```typescript\ninterface ParsedType {\n  defaultValue?: any\n  depth: number\n  nestedRequired: boolean[]\n  required: boolean\n  type: string\n}\n```\n\n```javascript\nparseKind('ID')\n```\n\n```snapshot\nFPQL.ParseKind\n```\n\n```javascript\nparseKind('ID!')\n```\n\n```snapshot\nFPQL.ParseKindRequired\n```\n\n```javascript\nparseKind('[ID!]!')\n```\n\n```snapshot\nFPQL.ParseKindList\n```\n\n```javascript\nparseKind('Int = 0')\n```\n\n```snapshot\nFPQL.ParseKindDefault\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "api",
    "bundle": ""
  },
  {
    "module": "graphql-schema-class",
    "name": "example-with-mongodb",
    "bundle": "```javascript\nimport gql from 'graphql-tag'\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\nimport {\n  ObjectIDResolver,\n  DateResolver\n} from 'graphql-scalars'\nimport { ObjectID } from 'mongodb'\n\nclass MongodbClass extends GraphqlSchemaClass {\n  static schema = gql`\n    input Post {\n      _id:        ObjectID!\n      author:     ObjectID!\n      createdAt:  Date = now()\n      title:      String!\n    }\n\n    input Author {\n      _id:        ObjectID!\n      createdAt:  Date = now()\n      name:       String!\n    }\n  `\n\n  static scalars = {\n    ObjectID: ObjectIDResolver,\n    Date: DateResolver,\n  }\n\n  static defaultFunctions = {\n    now: () => new Date()\n  }\n\n  static async function find(query) {\n    const documents = await db\n      .collection(MongodbClass.collection)\n      .find(query)\n    return documents.map((document) => new Model(document))\n  }\n\n  defaults = {\n    _id: new ObjectID()\n  }\n\n  isSaved = false\n\n  async function save(document) {\n    const _id = document.get('_id')\n    const collection = db.collection(this.constructor.collection)\n    const doc = document.toObject()\n\n    if (this.isSaved) {\n      await collection.updateOne({ _id }, doc)\n    } else {\n      const { insertedId } = await collection.insertOne(doc)\n      document.set('_id', insertedId)\n      this.isSaved = true\n    }\n  }\n}\n\nclass Post extends MongodbClass {\n  static input = \"Post\"\n  static collection = \"posts\"\n}\n\nclass Author extends MongodbClass {\n  static input = \"Author\"\n  static collection = \"authors\"\n}\n\nconst author = new Author({ name: 'doe' })\n\nauthor.toJSON()\n\nawait author.save()\n\nconst post = new Post({\n  title: 'My new post',\n  author: author.get('_id'),\n})\n\nawait post.save()\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "functions",
    "bundle": "```graphql\ninput User {\n  id: ID!\n  email: String!\n  createdAt: Timestamp! = now()\n}\n\ntype Query {\n  getUserById(id: ID!): User\n}\n\ntype Mutation {\n  saveUser(user: User!): ID!\n}\n```\n\n```javascript\nclass User extends GraphqlSchemaClass {\n  static schema = schema\n\n  static get = queryResolver(schema, 'getUserById', ({ id }) =>\n    db.find('users', { id })\n  )\n\n  static save = mutationResolver(schema, 'saveUser', ({ user }) =>\n    db.update('users', user.id, user)\n  )\n}\n\nconst user = await User.get({ id: 2 })\n\nuser.set('email', '...')\n\nawait User.save({ user })\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "required-and-null-values",
    "bundle": ""
  },
  {
    "module": "graphql-schema-class",
    "name": "schema",
    "bundle": ""
  },
  {
    "module": "graphql-schema-class",
    "name": "set",
    "bundle": ""
  },
  {
    "module": "graphql-schema-class",
    "name": "usage",
    "bundle": "Use `GraphQL` to create classes with validation, formatting, required and default values included!\n\nJust enter a schema and it will return you a class\n\n```javascript\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\n\nclass Todo extends GraphqlSchemaClass {\n  static schema = gql`\n    input Todo {\n      title: String!\n      done: Boolean = false\n    }\n  `\n}\n\nconst todo = new Todo({ title: 'Buy milk' })\n\ntodo.toJSON()\n```\n\n```snapshot2\nGraphqlSchemaClass.Example\n```\n\n## static schema\n\nThe schema to use.\n\nBy default we pick the first encountered type as the model.\n\n```javascript\nclass Post extends GraphqlSchemaClass {\n  static readonly schema = gql`\n    type Post {\n      title: String!\n      tags: [Tag!]!\n    }\n\n    type Tag {\n      tilte: String!\n    }\n  `\n}\n\nnew Post({\n  title: '...',\n  tags: [{ title: '...' }]\n})\n```\n\n## static type\n\nSpecify which type to use.\n\n```javascript\nconst schema = gql`\n  type Post {\n    title: String!\n    tags: [Tag!]!\n  }\n\n  type Tag {\n    tilte: String!\n  }\n`\n\nclass Post extends GraphqlSchemaClass {\n  static readonly schema = schema\n  static readonly type = \"Post\"\n}\n\nclass Tag extends GraphqlSchemaClass {\n  static readonly schema = schema\n  static readonly type = \"Tag\"\n}\n\nnew Post({\n  title: '...',\n  tags: [new Tag({ title: '...' })]\n})\n```\n\n## Class\n\n### Constructor\n\nWhen you construct a new instance, just pass the data.\n\n**It has to be a valid schema**\n\n```javascript\nimport graphql from '@browserql/graphql-schema-class'\n\nconst Todo = graphql`\n  type Todo @schema {\n    title: String!\n    done: Boolean! = false\n  }\n`\n\nconst todo = new Todo({ title: 'Buy milk' })\n\ntodo.toJSON()\n```\n\n### get\n\n### set\n\n### toJSON\n\n### toObject\n\n### Custom methods\n\n```graphql\ntype TodoSchema {\n  id: ID!\n  title: String!\n  done: Boolean!\n}\n```\n\n```graphql\ntype TodoModel {\n  new(title: String!, done: Boolean = false): Todo @constructor\n\n  paginate(page: Int = 1, size: Int = 25): [Todo!]! @static\n  getById(id: ID!): Todo @static\n\n  add(todo: AddableTodo!): Todo! @static\n  update(id: ID!, todo: UpdatableTodo): Todo @static\n  remove(id: ID!): Todo @static\n}\n```\n\n```javascript\nimport graphql from '@browserql/graphql-schema-class'\n\nconst todos = []\nlet id = 1\n\nconst Todo = graphql({ schema, model }, {\n  Query: {\n    async paginate({ page, size }) {\n      return todos.slice(page * size, size)\n    }\n    async getById({ id }) {\n      return todos.find(todo => todo.id === id)\n    }\n  },\n  Mutation: {\n    async add({ title, done }) {\n      id++\n      const todo = new Todo({ title, done, id })\n      todos.push(todo)\n      return todo\n    }\n    async update({ id, title, done }) {}\n    async remove({ id }) {}\n  }\n})\n\nconst todo = new Todo({ title: 'Buy milk' })\n\nexpect(todo.get('done')).toBe(false)\n\nconst { id } = await Todo.add(todo.toJSON())\n\ntodo.set({ done: true })\n\nawait Todo.update(id, todo.toJSON())\n\nconst { done } = await Todo.getById(id)\n\nexpect(done).toBe(true)\n```\n\n## How does it work\n\nJust provide the type and it will generate a class that make sure its schema:\n\n- is valid\n- handles required fields\n- handles default values\n- handles value types and type formatting\n- includes serializing\n- can be extended\n- has safe-type getters and setters\n\n## Example with MongoDB\n\n```javascript\nimport gql from 'graphql-tag'\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\nimport {\n  ObjectIDResolver,\n  DateResolver\n} from 'graphql-scalars'\nimport { ObjectID } from 'mongodb'\n\nclass MongodbClass extends GraphqlSchemaClass {\n  static schema = gql`\n    input Post {\n      _id:        ObjectID!\n      author:     ObjectID!\n      createdAt:  Date = now()\n      title:      String!\n    }\n\n    input Author {\n      _id:        ObjectID!\n      createdAt:  Date = now()\n      name:       String!\n    }\n  `\n\n  static scalars = {\n    ObjectID: ObjectIDResolver,\n    Date: DateResolver,\n  }\n\n  static defaultFunctions = {\n    now: () => new Date()\n  }\n\n  static async function find(query) {\n    const documents = await db\n      .collection(MongodbClass.collection)\n      .find(query)\n    return documents.map((document) => new Model(document))\n  }\n\n  defaults = {\n    _id: new ObjectID()\n  }\n\n  isSaved = false\n\n  async function save(document) {\n    const _id = document.get('_id')\n    const collection = db.collection(this.constructor.collection)\n    const doc = document.toObject()\n\n    if (this.isSaved) {\n      await collection.updateOne({ _id }, doc)\n    } else {\n      const { insertedId } = await collection.insertOne(doc)\n      document.set('_id', insertedId)\n      this.isSaved = true\n    }\n  }\n}\n\nclass Post extends MongodbClass {\n  static input = \"Post\"\n  static collection = \"posts\"\n}\n\nclass Author extends MongodbClass {\n  static input = \"Author\"\n  static collection = \"authors\"\n}\n\nconst author = new Author({ name: 'doe' })\n\nauthor.toJSON()\n\nawait author.save()\n\nconst post = new Post({\n  title: 'My new post',\n  author: author.get('_id'),\n})\n\nawait post.save()\n```\n\n```javascript\nimport graphql from '@browserql/graphql-class'\n\nconst scalars = ['scalar JSON', 'scalar EmailAddress']\n\nconst Todo = graphql`\n  type Todo {\n    title: String!\n    done: Boolean = false\n    email: EmailAddress!\n  }\n`\n\nTodo.inject(\n  gql`\n    scalar JSON\n    directive @foo on OBJECT\n  `,\n  {\n    JSON: JSONResolver,\n    '@foo': FooResolver,\n  }\n)\n\nTodo.schema.addScalar('JSON', JSONResolver)\n\nTodo.schema.addDirective('directive @foo on FIELD_DEFINITION')\n\nTodo.resolve('scalar', MyScalar)\n\nconst todo = new Todo() // Error: Missing field Todo.title\n\nconst todo = new Todo({ title: 'Buy milk' })\n\ntodo.get('title') // \"Buy milk\"\n\ntodo.get('done') // false\n\ntodo.set('done', 'Buy milk') // Error: Field Todo.done should be a Boolean\n\ntodo.set('done', true)\n\ntodo.toJSON() // { \"title\": \"Buy milk\", \"done\": true }\n\nconst sayHello = graphql`\n  type Query {\n    sayHello(to: String!): String!\n  }\n`(({ to }) => `hello ${to}`)\n\nsayHello() // Missing required field sayHello.to\n\nconst Post = graphql`\n  type Post {\n    title: String!\n    author: Author!\n  }\n`\n\nconst Author = graphql`\n  type Author {\n    name: String!\n  }\n`\n\nPost.resolve('Author', Author)\n\nclass Post extends (graphql`\n  type Post {\n    title: String!\n    author: Author!\n  }\n`) {\n  static foo = 2\n  bar = true\n}\n```\n"
  },
  {
    "module": "react",
    "name": "provider",
    "bundle": "The browserql react provider creates a new browserql client and keeps it under a react context so it is accessible to all its children\n\n```sandbox\nreact-provider-ruh7c\n```\n\n```graphql\ntype Query {\n  sayHello(to: String!): String!\n}\n```\n\n```javascript\nimport React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport { BrowserqlProvider, BrowserqlContext } from '@browserql/react'\nimport { buildQuery } from '@browserql/operations'\n\nconst queries = {\n  sayHello({ to }) {\n    return `Hello ${to}`\n  },\n}\n\nfunction SayHello({ to }) {\n  const context = useContext(BrowserqlContext)\n  const query = buildQuery(context.schema, 'sayHello')\n\n  const { data, loading } = useQuery(query, {\n    variables: { to },\n  })\n\n  if (loading) return <div>Loading...</div>\n\n  return <p>{data.sayHello}</p>\n}\n\nexport default function App() {\n  return (\n    <BrowserqlProvider schema={schema} queries={queries}>\n      <SayHello to=\"everybody\" />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```snapshot2\nReact.SandboxMainExample\n```\n\n## Props\n\nYou can either pass directly a `browserql` client using the `client` prop -- or use any other props to have the provider make the client.\n\n| Prop           | About                                                  | Type                                                               | Required                                        | Default |\n| -------------- | ------------------------------------------------------ | ------------------------------------------------------------------ | ----------------------------------------------- | ------- |\n| **client**     | A browserql client                                     | `BrowserqlClient`                                                  | If you are using it, it has to be the only prop | N/A     |\n| **schema**     | GraphQL definitions                                    | `DocumentNode`                                                     | N                                               | N/A     |\n| **queries**    | A dictionary of query resolvers                        | `Record<string, (variables: V, ctx: BrowserqlClientContext) => D>` | N                                               | N/A     |\n| **mutations**  | A dictionary of mutation resolvers                     | `Record<string, (variables: V, ctx: BrowserqlClientContext) => D>` | N                                               | N/A     |\n| **scalars**    | A dictionary of scalar resolvers                       | `Record<string, GraphQLScalarType>`                                | N                                               | N/A     |\n| **directives** | A dictionary of directive resolvers                    | `Record<string, SchemaDirectiveVisitorClass>`                      | N                                               | N/A     |\n| **extensions** | An argument that can be passed to a `browserql` client | `BrowserqlClientOption[]`                                          | N                                               | N/A     |\n\n### client\n\nYou can pass directly an instance of a [browserql client](/client/usage)\n\n```javascript\nimport connect from '@browserql/client'\n\nconst client = connect(schema)\n\nfunction Foo() {\n  return (\n    <BrowserqlProvider client={client}>\n      <App />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```snapshot2\nReact.ProviderClientProp\n```\n\nOr pass any argument accepted as an argument by the [connect function](/client/usage):\n\n```graphql\nscalar JSON\n\ndirective @variant(name: VARIANT) on FIELD_DEFINITION\n\nenum VARIANT {\n  HIGH\n  LOW\n}\n\ntype Query {\n  getHigh: JSON @variant(name: HIGH)\n}\n\ntype Mutation {\n  changePitchLevel(level: Float!): JSON!\n}\n```\n\n```javascript\nimport { JSONResolver } from 'graphql-scalars'\n\nfunction Foo() {\n  return (\n    <BrowserqlProvider\n      schema={schema}\n      queries={{\n        getHigh() {},\n      }}\n      mutations={{\n        changePitchLevel({ level }) {},\n      }}\n      scalars={{ JSON: JSONResolver }}\n      directives={{ variant: VariantResolver }}\n    >\n      <App />\n    </BrowserqlProvider>\n  )\n}\n```\n\n```snapshot2\nReact.ProviderClientProp\n```\n"
  },
  {
    "module": "react",
    "name": "use-mutation",
    "bundle": ""
  },
  {
    "module": "react",
    "name": "with-mutation",
    "bundle": ""
  },
  {
    "module": "react",
    "name": "with-query",
    "bundle": ""
  },
  {
    "module": "typescript-generator",
    "name": "usage",
    "bundle": "```typescript\nfunction gents(\n  schema: graphql.DocumentNode\n  options: Options = {}\n): string\n```\n"
  },
  {
    "module": "cache",
    "name": "get",
    "bundle": "Get cache entry for a query\n\nSpecify a query and it will return the cache entry for it\n\n## Example\n\n```react\n{\n  \"file\": {\n    \"name\": \"view.tsx\",\n    \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 800\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"get\",\n    \"files\": [\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type Query {\\n  getScore: Int!\\n  getLevel: Int\\n  getTemp: Int @default(value: 100)\\n  getUser(id: ID!): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"null.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"default.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int @default(value: 10)\\n}\\n\\ndirective @default(value: Int!) on FIELD_DEFINITION`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 800\\n\"\n      },\n      {\n        \"name\": \"undefined.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int!\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 1000\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Empty cache\n\nIf the cache is empty for the query, it will return either `null` or `undefined`\n\n### Empty cache on a nullable value\n\nIf a query's type is nullable (`ID`) and cache is empty, it will return null.\n\n```react\n{\n  \"file\": {\n    \"name\": \"null.tsx\",\n    \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"get\",\n    \"files\": [\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type Query {\\n  getScore: Int!\\n  getLevel: Int\\n  getTemp: Int @default(value: 100)\\n  getUser(id: ID!): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"null.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"default.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int @default(value: 10)\\n}\\n\\ndirective @default(value: Int!) on FIELD_DEFINITION`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 800\\n\"\n      },\n      {\n        \"name\": \"undefined.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int!\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 1000\\n\"\n      }\n    ]\n  }\n}\n```\n\n### Empty cache on a non-nullable value\n\nIf a query's type is non-nullable (`ID!`) and cache is empty, it will return `undefined`.\n\n```react\n{\n  \"file\": {\n    \"name\": \"undefined.tsx\",\n    \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int!\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 1000\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"get\",\n    \"files\": [\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type Query {\\n  getScore: Int!\\n  getLevel: Int\\n  getTemp: Int @default(value: 100)\\n  getUser(id: ID!): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"null.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"default.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int @default(value: 10)\\n}\\n\\ndirective @default(value: Int!) on FIELD_DEFINITION`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 800\\n\"\n      },\n      {\n        \"name\": \"undefined.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int!\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 1000\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Default value\n\nYou can also set a default value:\n\n```react\n{\n  \"file\": {\n    \"name\": \"default.tsx\",\n    \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int @default(value: 10)\\n}\\n\\ndirective @default(value: Int!) on FIELD_DEFINITION`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"get\",\n    \"files\": [\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type Query {\\n  getScore: Int!\\n  getLevel: Int\\n  getTemp: Int @default(value: 100)\\n  getUser(id: ID!): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"null.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"default.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int @default(value: 10)\\n}\\n\\ndirective @default(value: Int!) on FIELD_DEFINITION`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 700\\n\"\n      },\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 800\\n\"\n      },\n      {\n        \"name\": \"undefined.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n  getScore: Int!\\n}`\\n\\n  const query = `{\\n  getScore\\n}`\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} initialTab={1} />\\n}\\n\\nTryIt.height = 1000\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "cache",
    "name": "usage",
    "bundle": "Apollo cache accessor utility\n\n## Usage\n\n```javascript\nimport cacheql from '@browserql/cache'\nimport connect from '@browserql/connect'\nimport gql from 'graphql-tag'\n\nconst { cache, schema } = connect(\n  gql'type Query { getCounter: Int! @default(value: 100) }'\n)\n\nconst cached = cacheql(cache, schema)\nconst GET_COUNTER = gql`{ getCounter }`\n\ncached.get(GET_COUNTER) // 100\n\ncached.set(GET_COUNTER, 0)\n\ncached.get(GET_COUNTER) // 0\n```\n\n## Demo\n\n```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\\nimport React, { useContext, useState } from 'react'\\nimport { BrowserqlContext, BrowserqlProvider } from '@browserql/react'\\nimport gql from 'graphql-tag'\\nimport { useQuery } from '@apollo/client'\\nimport cacheql from '@browserql/cache'\\n\\nconst schema = `type Query {\\n  getCounter(user: ID!): Int\\n}`\\n\\nconst query = gql`\\n  query Query($user: ID!) {\\n    getCounter(user: $user)\\n  }\\n`\\n\\nfunction View() {\\n  const ctx = useContext(BrowserqlContext)\\n  const [updated, setUpdated] = useState(0)\\n  const cached = cacheql(ctx.cache, ctx.schema)\\n  const query1 = useQuery(query, {\\n    variables: { user: 1 },\\n  })\\n  console.log({ query1 })\\n  let counter1 = ''\\n  if (query1.loading) {\\n    counter1 = 'loading'\\n  } else if (query1.error) {\\n    counter1 = 'error'\\n  } else {\\n    counter1 = query1.data.getCounter\\n  }\\n  const query2 = useQuery(query, {\\n    variables: { user: 2 },\\n  })\\n  let counter2 = ''\\n  if (query2.loading) {\\n    counter2 = 'loading'\\n  } else if (query2.error) {\\n    counter2 = 'error'\\n  } else {\\n    counter2 = query2.data.getCounter\\n  }\\n  console.log({ updated })\\n  return (\\n    <div>\\n      <Code language=\\\"graphql\\\" value={schema} />\\n      <div>\\n        <ButtonGroup fullWidth>\\n          <Button onClick={() => cached.set(query, { user: 1 }, 10)}>\\n            User 1\\n          </Button>\\n          <Button onClick={() => setUpdated(updated + 1)}>User 2</Button>\\n        </ButtonGroup>\\n      </div>\\n      <Code\\n        language=\\\"graphql\\\"\\n        value={`query {\\n  getCounter(user: 1): ${counter1}\\n  getCounter(user: 2): ${counter2}\\n}`}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport default function Example() {\\n  return (\\n    <BrowserqlProvider schema={gql(schema)}>\\n      <View />\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 450\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\\nimport React, { useContext, useState } from 'react'\\nimport { BrowserqlContext, BrowserqlProvider } from '@browserql/react'\\nimport gql from 'graphql-tag'\\nimport { useQuery } from '@apollo/client'\\nimport cacheql from '@browserql/cache'\\n\\nconst schema = `type Query {\\n  getCounter(user: ID!): Int\\n}`\\n\\nconst query = gql`\\n  query Query($user: ID!) {\\n    getCounter(user: $user)\\n  }\\n`\\n\\nfunction View() {\\n  const ctx = useContext(BrowserqlContext)\\n  const [updated, setUpdated] = useState(0)\\n  const cached = cacheql(ctx.cache, ctx.schema)\\n  const query1 = useQuery(query, {\\n    variables: { user: 1 },\\n  })\\n  console.log({ query1 })\\n  let counter1 = ''\\n  if (query1.loading) {\\n    counter1 = 'loading'\\n  } else if (query1.error) {\\n    counter1 = 'error'\\n  } else {\\n    counter1 = query1.data.getCounter\\n  }\\n  const query2 = useQuery(query, {\\n    variables: { user: 2 },\\n  })\\n  let counter2 = ''\\n  if (query2.loading) {\\n    counter2 = 'loading'\\n  } else if (query2.error) {\\n    counter2 = 'error'\\n  } else {\\n    counter2 = query2.data.getCounter\\n  }\\n  console.log({ updated })\\n  return (\\n    <div>\\n      <Code language=\\\"graphql\\\" value={schema} />\\n      <div>\\n        <ButtonGroup fullWidth>\\n          <Button onClick={() => cached.set(query, { user: 1 }, 10)}>\\n            User 1\\n          </Button>\\n          <Button onClick={() => setUpdated(updated + 1)}>User 2</Button>\\n        </ButtonGroup>\\n      </div>\\n      <Code\\n        language=\\\"graphql\\\"\\n        value={`query {\\n  getCounter(user: 1): ${counter1}\\n  getCounter(user: 2): ${counter2}\\n}`}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport default function Example() {\\n  return (\\n    <BrowserqlProvider schema={gql(schema)}>\\n      <View />\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 450\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "cache",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"tryit-render.tsx\",\n    \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n    getCounter: Int @default(value: 10)\\n    isLoggedIn: Boolean @default(value: false)\\n  }\\n  \\n  directive @default(value: Int) on FIELD_DEFINITION`\\n\\n  const query = '{ getCounter, isLoggedIn }'\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} />\\n}\\n\\nTryIt.height = 1000\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"cache\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"tryit-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport TryCache from '@browserql/components/tryit/Cache'\\n\\nexport default function TryIt() {\\n  const schema = `type Query {\\n    getCounter: Int @default(value: 10)\\n    isLoggedIn: Boolean @default(value: false)\\n  }\\n  \\n  directive @default(value: Int) on FIELD_DEFINITION`\\n\\n  const query = '{ getCounter, isLoggedIn }'\\n\\n  return <TryCache initialSchema={schema} initialQuery={query} />\\n}\\n\\nTryIt.height = 1000\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "client",
    "name": "schema",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"try-client.tsx\",\n    \"source\": \"import TryClient from '@browserql/components/tryit/Client'\\nimport React from 'react'\\nimport { DateResolver } from 'graphql-scalars'\\nimport connect from '@browserql/client'\\nimport gql from 'graphql-tag'\\nimport { print } from 'graphql'\\n\\nexport default function View() {\\n  const schema = gql`\\n    type Query {\\n      whatTimeIsIt: Date!\\n    }\\n    scalar Date\\n  `\\n\\n  const query = gql`\\n    {\\n      whatTimeIsIt\\n    }\\n  `\\n\\n  const queries = {\\n    whatTimeIsIt() {\\n      return new Date()\\n    },\\n  }\\n\\n  const queriesFile = `export function whatTimeIsIt() {\\n    return new Date()\\n  }`\\n\\n  const scalars = { Date: DateResolver }\\n\\n  const scalarsFile = `export { DateResolver as Date } from 'graphql-scalars'`\\n\\n  return (\\n    <TryClient\\n      schema={print(schema)}\\n      query={print(query)}\\n      scalars={scalars}\\n      queries={queries}\\n      scalarsFile={scalarsFile}\\n      queriesFile={queriesFile}\\n    />\\n  )\\n}\\n\\nView.height = 1990\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"client\",\n    \"name\": \"schema\",\n    \"files\": [\n      {\n        \"name\": \"try-client.tsx\",\n        \"source\": \"import TryClient from '@browserql/components/tryit/Client'\\nimport React from 'react'\\nimport { DateResolver } from 'graphql-scalars'\\nimport connect from '@browserql/client'\\nimport gql from 'graphql-tag'\\nimport { print } from 'graphql'\\n\\nexport default function View() {\\n  const schema = gql`\\n    type Query {\\n      whatTimeIsIt: Date!\\n    }\\n    scalar Date\\n  `\\n\\n  const query = gql`\\n    {\\n      whatTimeIsIt\\n    }\\n  `\\n\\n  const queries = {\\n    whatTimeIsIt() {\\n      return new Date()\\n    },\\n  }\\n\\n  const queriesFile = `export function whatTimeIsIt() {\\n    return new Date()\\n  }`\\n\\n  const scalars = { Date: DateResolver }\\n\\n  const scalarsFile = `export { DateResolver as Date } from 'graphql-scalars'`\\n\\n  return (\\n    <TryClient\\n      schema={print(schema)}\\n      query={print(query)}\\n      scalars={scalars}\\n      queries={queries}\\n      scalarsFile={scalarsFile}\\n      queriesFile={queriesFile}\\n    />\\n  )\\n}\\n\\nView.height = 1990\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "executable",
    "name": "tryit",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"view.tsx\",\n    \"source\": \"import React, { useState } from 'react'\\nimport SchemaComposer from '@browserql/schema-composer'\\nimport Select from '@material-ui/core/Select'\\nimport { getName, getQueries } from '@browserql/fpql'\\nimport { parse } from 'graphql'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Code from '@browserql/components/Code'\\nimport { printExecutableQuery } from '@browserql/executable'\\n\\nconst SCHEMA = `type Query {\\n  getUserById(id: ID!): User\\n}\\n`\\n\\nexport default function View() {\\n  const [schema, setSchema] = useState(SCHEMA)\\n  const [selectedQueries, setSelectedQueries] = useState<string[]>([])\\n  const queries = getQueries(parse(schema))\\n  return (\\n    <div>\\n      <SchemaComposer schema={schema} onChange={setSchema} />\\n      <div>\\n        <Select\\n          multiple\\n          value={selectedQueries}\\n          onChange={(event: React.ChangeEvent<{ value: unknown }>) =>\\n            setSelectedQueries(event.target.value as string[])\\n          }\\n        >\\n          {queries.map((query) => (\\n            <MenuItem key={getName(query)} value={getName(query)}>\\n              {getName(query)}\\n            </MenuItem>\\n          ))}\\n        </Select>\\n      </div>\\n      <Code\\n        language=\\\"graphql\\\"\\n        value={printExecutableQuery(parse(schema), selectedQueries[0])}\\n      />\\n    </div>\\n  )\\n}\\n\\nView.height = 500\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"executable\",\n    \"name\": \"tryit\",\n    \"files\": [\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import React, { useState } from 'react'\\nimport SchemaComposer from '@browserql/schema-composer'\\nimport Select from '@material-ui/core/Select'\\nimport { getName, getQueries } from '@browserql/fpql'\\nimport { parse } from 'graphql'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Code from '@browserql/components/Code'\\nimport { printExecutableQuery } from '@browserql/executable'\\n\\nconst SCHEMA = `type Query {\\n  getUserById(id: ID!): User\\n}\\n`\\n\\nexport default function View() {\\n  const [schema, setSchema] = useState(SCHEMA)\\n  const [selectedQueries, setSelectedQueries] = useState<string[]>([])\\n  const queries = getQueries(parse(schema))\\n  return (\\n    <div>\\n      <SchemaComposer schema={schema} onChange={setSchema} />\\n      <div>\\n        <Select\\n          multiple\\n          value={selectedQueries}\\n          onChange={(event: React.ChangeEvent<{ value: unknown }>) =>\\n            setSelectedQueries(event.target.value as string[])\\n          }\\n        >\\n          {queries.map((query) => (\\n            <MenuItem key={getName(query)} value={getName(query)}>\\n              {getName(query)}\\n            </MenuItem>\\n          ))}\\n        </Select>\\n      </div>\\n      <Code\\n        language=\\\"graphql\\\"\\n        value={printExecutableQuery(parse(schema), selectedQueries[0])}\\n      />\\n    </div>\\n  )\\n}\\n\\nView.height = 500\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "client",
    "name": "subscriptions",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"main-view.tsx\",\n    \"source\": \"import TryClient from '@browserql/components/tryit/Client'\\nimport React from 'react'\\nimport { DateResolver } from 'graphql-scalars'\\nimport connect from '@browserql/client'\\nimport gql from 'graphql-tag'\\nimport { print } from 'graphql'\\nimport { PubSub } from 'graphql-subscriptions'\\n\\nconst pubsub = new PubSub()\\n\\nexport default function View() {\\n  const schema = gql`\\n    type Query {\\n      whatTimeIsIt: Date!\\n    }\\n\\n    type Subscription {\\n      timeChecked: Date!\\n    }\\n\\n    scalar Date\\n  `\\n\\n  const query = gql`\\n    {\\n      whatTimeIsIt\\n    }\\n  `\\n\\n  const queries = {\\n    whatTimeIsIt() {\\n      console.log('QUERY')\\n      pubsub.publish('MY_EVENT', new Date())\\n      return new Date()\\n    },\\n  }\\n\\n  const queriesFile = `export function whatTimeIsIt() {\\n    return new Date()\\n  }`\\n\\n  const scalars = { Date: DateResolver }\\n\\n  const scalarsFile = `export { DateResolver as Date } from 'graphql-scalars'`\\n\\n  const subscriptions = {\\n    timeChecked() {\\n      console.log('SUUUUUB')\\n      return pubsub.asyncIterator('MY_EVENT')\\n    },\\n  }\\n\\n  const subscriptionsFile = `import { PubSub } from 'graphql-subscriptions'\\n\\nconst pubsub = new PubSub()\\n\\nexport const timeChecheck = {\\n  subscribe() {\\n    return pubsub.asyncIterator('MY_EVENT')\\n  },\\n}`\\n\\n  return (\\n    <TryClient\\n      schema={print(schema)}\\n      query={print(query)}\\n      scalars={scalars}\\n      queries={queries}\\n      scalarsFile={scalarsFile}\\n      queriesFile={queriesFile}\\n      subscriptionsFile={subscriptionsFile}\\n      subscriptions={subscriptions}\\n    />\\n  )\\n}\\n\\nView.height = 1990\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"client\",\n    \"name\": \"subscriptions\",\n    \"files\": [\n      {\n        \"name\": \"main-view.tsx\",\n        \"source\": \"import TryClient from '@browserql/components/tryit/Client'\\nimport React from 'react'\\nimport { DateResolver } from 'graphql-scalars'\\nimport connect from '@browserql/client'\\nimport gql from 'graphql-tag'\\nimport { print } from 'graphql'\\nimport { PubSub } from 'graphql-subscriptions'\\n\\nconst pubsub = new PubSub()\\n\\nexport default function View() {\\n  const schema = gql`\\n    type Query {\\n      whatTimeIsIt: Date!\\n    }\\n\\n    type Subscription {\\n      timeChecked: Date!\\n    }\\n\\n    scalar Date\\n  `\\n\\n  const query = gql`\\n    {\\n      whatTimeIsIt\\n    }\\n  `\\n\\n  const queries = {\\n    whatTimeIsIt() {\\n      console.log('QUERY')\\n      pubsub.publish('MY_EVENT', new Date())\\n      return new Date()\\n    },\\n  }\\n\\n  const queriesFile = `export function whatTimeIsIt() {\\n    return new Date()\\n  }`\\n\\n  const scalars = { Date: DateResolver }\\n\\n  const scalarsFile = `export { DateResolver as Date } from 'graphql-scalars'`\\n\\n  const subscriptions = {\\n    timeChecked() {\\n      console.log('SUUUUUB')\\n      return pubsub.asyncIterator('MY_EVENT')\\n    },\\n  }\\n\\n  const subscriptionsFile = `import { PubSub } from 'graphql-subscriptions'\\n\\nconst pubsub = new PubSub()\\n\\nexport const timeChecheck = {\\n  subscribe() {\\n    return pubsub.asyncIterator('MY_EVENT')\\n  },\\n}`\\n\\n  return (\\n    <TryClient\\n      schema={print(schema)}\\n      query={print(query)}\\n      scalars={scalars}\\n      queries={queries}\\n      scalarsFile={scalarsFile}\\n      queriesFile={queriesFile}\\n      subscriptionsFile={subscriptionsFile}\\n      subscriptions={subscriptions}\\n    />\\n  )\\n}\\n\\nView.height = 1990\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "firestore",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"tryit.tsx\",\n    \"source\": \"import React, { useContext } from 'react'\\nimport gql from 'graphql-tag'\\nimport { BrowserqlContext, BrowserqlProvider } from '@browserql/react'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport { connect as connectFirestoreql } from '@browserql/firestore'\\nimport GraphiQL from '@browserql/graphiql'\\nimport MockFirebase from 'mock-cloud-firestore'\\nimport mockDb from '../mockDb'\\n\\nexport default function TryIt() {\\n  const fixtureData = {\\n    __collection__: {\\n      users: {\\n        __doc__: {\\n          user_a: {\\n            age: 15,\\n            username: 'user_a',\\n          },\\n        },\\n      },\\n      Todo: {\\n        __doc__: {\\n          todo_1: {\\n            done: false,\\n            title: 'Buy milk',\\n          },\\n        },\\n      },\\n    },\\n  }\\n\\n  const firebase = new MockFirebase(fixtureData)\\n\\n  const db = mockDb([\\n    {\\n      collection: 'Todo',\\n      id: 'todo_1',\\n      data: {\\n        done: false,\\n        title: 'Buy milk',\\n      },\\n    },\\n  ])\\n\\n  const schema = gql`\\n    type Todo @firestore {\\n      title: String!\\n      done: Boolean!\\n    }\\n  `\\n\\n  function View() {\\n    const ctx = useContext(BrowserqlContext)\\n    return (\\n      <GraphiQL\\n        schema={ctx.schema}\\n        client={ctx.client}\\n        graphiqlProps={{\\n          query: `query GetManyTodo(\\n$where: [FirestoreWhere]\\n$filters: FirestoreFilters\\n) {\\nfirestore_getMany_Todo(\\nwhere: $where\\nfilters: $filters\\n) {\\nid\\ntitle\\ndone\\n}\\n}\\n`,\\n          response: JSON.stringify(\\n            {\\n              data: {\\n                firestore_getMany_Todo: [\\n                  {\\n                    id: 'todo_1',\\n                    title: 'Buy milk',\\n                    done: false,\\n                    __typename: 'Todo',\\n                  },\\n                ],\\n              },\\n              loading: false,\\n              networkStatus: 7,\\n              stale: false,\\n            },\\n            null,\\n            2\\n          ),\\n          variables: JSON.stringify({}, null, 2),\\n        }}\\n      />\\n    )\\n  }\\n\\n  return (\\n    <BrowserqlProvider\\n      schema={schema}\\n      scalars={{ JSON: JSONResolver }}\\n      extensions={[\\n        connectFirestoreql(db, schema),\\n        {\\n          schema: gql`\\n            scalar JSON\\n          `,\\n        },\\n      ]}\\n    >\\n      <div style={{ height: 600 }}>\\n        <View />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nTryIt.height = 900\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"firestore\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"tryit.tsx\",\n        \"source\": \"import React, { useContext } from 'react'\\nimport gql from 'graphql-tag'\\nimport { BrowserqlContext, BrowserqlProvider } from '@browserql/react'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport { connect as connectFirestoreql } from '@browserql/firestore'\\nimport GraphiQL from '@browserql/graphiql'\\nimport MockFirebase from 'mock-cloud-firestore'\\nimport mockDb from '../mockDb'\\n\\nexport default function TryIt() {\\n  const fixtureData = {\\n    __collection__: {\\n      users: {\\n        __doc__: {\\n          user_a: {\\n            age: 15,\\n            username: 'user_a',\\n          },\\n        },\\n      },\\n      Todo: {\\n        __doc__: {\\n          todo_1: {\\n            done: false,\\n            title: 'Buy milk',\\n          },\\n        },\\n      },\\n    },\\n  }\\n\\n  const firebase = new MockFirebase(fixtureData)\\n\\n  const db = mockDb([\\n    {\\n      collection: 'Todo',\\n      id: 'todo_1',\\n      data: {\\n        done: false,\\n        title: 'Buy milk',\\n      },\\n    },\\n  ])\\n\\n  const schema = gql`\\n    type Todo @firestore {\\n      title: String!\\n      done: Boolean!\\n    }\\n  `\\n\\n  function View() {\\n    const ctx = useContext(BrowserqlContext)\\n    return (\\n      <GraphiQL\\n        schema={ctx.schema}\\n        client={ctx.client}\\n        graphiqlProps={{\\n          query: `query GetManyTodo(\\n$where: [FirestoreWhere]\\n$filters: FirestoreFilters\\n) {\\nfirestore_getMany_Todo(\\nwhere: $where\\nfilters: $filters\\n) {\\nid\\ntitle\\ndone\\n}\\n}\\n`,\\n          response: JSON.stringify(\\n            {\\n              data: {\\n                firestore_getMany_Todo: [\\n                  {\\n                    id: 'todo_1',\\n                    title: 'Buy milk',\\n                    done: false,\\n                    __typename: 'Todo',\\n                  },\\n                ],\\n              },\\n              loading: false,\\n              networkStatus: 7,\\n              stale: false,\\n            },\\n            null,\\n            2\\n          ),\\n          variables: JSON.stringify({}, null, 2),\\n        }}\\n      />\\n    )\\n  }\\n\\n  return (\\n    <BrowserqlProvider\\n      schema={schema}\\n      scalars={{ JSON: JSONResolver }}\\n      extensions={[\\n        connectFirestoreql(db, schema),\\n        {\\n          schema: gql`\\n            scalar JSON\\n          `,\\n        },\\n      ]}\\n    >\\n      <div style={{ height: 600 }}>\\n        <View />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nTryIt.height = 900\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getValue",
    "bundle": "Get a value node\n\n```graphql\nenum Foo {\n  Bar\n}\n\ndirective @variant(admin: Boolean!) on FIELD_DEFINITION\n\ntype Query {\n  getUser: User @variant(admin: true foo: Foo = Bar)\n}\n```\n\n## Get directive argument value\n\n```javascript\nimport { getValue, getField, getQuery } from '@browserql/fpql'\nimport fp from '@browserql/fp'\n\nfp(schema)(getQuery('getUser'), getField('foo'), getValue)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"field-argument-value.tsx\",\n    \"source\": \"import React from 'react'\\nimport gql from 'graphql-tag'\\nimport Code from '@browserql/components/Code'\\nimport { getValue, getArgument, getQuery, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\n\\nexport default function View() {\\n  const schema = gql`\\n    enum Foo {\\n      Bar\\n    }\\n\\n    directive @variant(admin: Boolean!) on FIELD_DEFINITION\\n\\n    type Query {\\n      getUser: User @variant(admin: true, foo: Bar)\\n    }\\n  `\\n  return (\\n    <Code\\n      language=\\\"json\\\"\\n      value={JSON.stringify(\\n        fp(schema)(\\n          getQuery('getUser'),\\n          getDirective('variant'),\\n          getArgument('foo'),\\n          getValue\\n        ),\\n        null,\\n        2\\n      )}\\n    />\\n  )\\n}\\n\\nView.height = 500\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getValue\",\n    \"files\": [\n      {\n        \"name\": \"field-argument-value.tsx\",\n        \"source\": \"import React from 'react'\\nimport gql from 'graphql-tag'\\nimport Code from '@browserql/components/Code'\\nimport { getValue, getArgument, getQuery, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\n\\nexport default function View() {\\n  const schema = gql`\\n    enum Foo {\\n      Bar\\n    }\\n\\n    directive @variant(admin: Boolean!) on FIELD_DEFINITION\\n\\n    type Query {\\n      getUser: User @variant(admin: true, foo: Bar)\\n    }\\n  `\\n  return (\\n    <Code\\n      language=\\\"json\\\"\\n      value={JSON.stringify(\\n        fp(schema)(\\n          getQuery('getUser'),\\n          getDirective('variant'),\\n          getArgument('foo'),\\n          getValue\\n        ),\\n        null,\\n        2\\n      )}\\n    />\\n  )\\n}\\n\\nView.height = 500\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "default-values",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport React, { useCallback, useEffect, useState } from 'react'\\nimport {\\n  applyDefaults,\\n  getSchemaDefinition,\\n} from '@browserql/graphql-schema-class'\\nimport gql from 'graphql-tag'\\nimport Typography from '@material-ui/core/Typography'\\nimport { DocumentNode } from 'graphql'\\nimport { getFields } from '@browserql/fpql'\\n\\nexport default function Example() {\\n  const [schema, setSchema] = useState(`type Foo {\\n  a: String!\\n  b: String\\n  c: String @default(value: \\\"hello\\\")\\n}`)\\n  const [result, setResult] = useState({ foo: null, name: 'me' })\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  const handleSubmit = useCallback(() => {\\n    setError(undefined)\\n    let node: DocumentNode\\n    try {\\n      try {\\n        node = gql(schema)\\n      } catch (err) {\\n        err.message = `Invalid GraphQLSchema: ${err.message}`\\n        throw err\\n      }\\n      const definition = getSchemaDefinition(node, {})\\n      const fields = getFields(definition)\\n      const values = applyDefaults(fields, {})\\n      setResult(values)\\n    } catch (err) {\\n      setError(err)\\n    }\\n  }, [schema])\\n\\n  useEffect(handleSubmit, [schema])\\n\\n  return (\\n    <div>\\n      <Typography variant=\\\"h5\\\">GraphQL Schema</Typography>\\n      <div style={{ padding: 12 }}>\\n        <TextField\\n          multiline\\n          value={schema}\\n          fullWidth\\n          onChange={(e) => {\\n            setSchema(e.target.value)\\n          }}\\n          variant=\\\"filled\\\"\\n        />\\n      </div>\\n      <Typography variant=\\\"h5\\\">Default values</Typography>\\n      {Boolean(error) && <Typography>ERROR: {error.message}</Typography>}\\n      {!error && (\\n        <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n      )}\\n    </div>\\n  )\\n}\\n\\nExample.height = 1670\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"graphql-schema-class\",\n    \"name\": \"default-values\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport React, { useCallback, useEffect, useState } from 'react'\\nimport {\\n  applyDefaults,\\n  getSchemaDefinition,\\n} from '@browserql/graphql-schema-class'\\nimport gql from 'graphql-tag'\\nimport Typography from '@material-ui/core/Typography'\\nimport { DocumentNode } from 'graphql'\\nimport { getFields } from '@browserql/fpql'\\n\\nexport default function Example() {\\n  const [schema, setSchema] = useState(`type Foo {\\n  a: String!\\n  b: String\\n  c: String @default(value: \\\"hello\\\")\\n}`)\\n  const [result, setResult] = useState({ foo: null, name: 'me' })\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  const handleSubmit = useCallback(() => {\\n    setError(undefined)\\n    let node: DocumentNode\\n    try {\\n      try {\\n        node = gql(schema)\\n      } catch (err) {\\n        err.message = `Invalid GraphQLSchema: ${err.message}`\\n        throw err\\n      }\\n      const definition = getSchemaDefinition(node, {})\\n      const fields = getFields(definition)\\n      const values = applyDefaults(fields, {})\\n      setResult(values)\\n    } catch (err) {\\n      setError(err)\\n    }\\n  }, [schema])\\n\\n  useEffect(handleSubmit, [schema])\\n\\n  return (\\n    <div>\\n      <Typography variant=\\\"h5\\\">GraphQL Schema</Typography>\\n      <div style={{ padding: 12 }}>\\n        <TextField\\n          multiline\\n          value={schema}\\n          fullWidth\\n          onChange={(e) => {\\n            setSchema(e.target.value)\\n          }}\\n          variant=\\\"filled\\\"\\n        />\\n      </div>\\n      <Typography variant=\\\"h5\\\">Default values</Typography>\\n      {Boolean(error) && <Typography>ERROR: {error.message}</Typography>}\\n      {!error && (\\n        <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n      )}\\n    </div>\\n  )\\n}\\n\\nExample.height = 1670\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport TextField from '@material-ui/core/TextField'\\nimport React, { useCallback, useEffect, useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\\nimport gql from 'graphql-tag'\\nimport Typography from '@material-ui/core/Typography'\\nimport { DocumentNode } from 'graphql'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport List from '@material-ui/core/List'\\nimport ListItem from '@material-ui/core/ListItem'\\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\\nimport ListItemText from '@material-ui/core/ListItemText'\\nimport Checkbox from '@material-ui/core/Checkbox'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\n\\nexport default function Example() {\\n  const [object, setObject] = useState({\\n    a: 'hello',\\n    bar: null,\\n  })\\n  const [schema, setSchema] = useState(`type Foo {\\n  a: String!\\n  bar: Bar\\n}\\n\\ntype Bar {\\n  b: Int!\\n}\\n`)\\n  const [result, setResult] = useState({ foo: null, name: 'me' })\\n  const [error, setError] = useState<Error | undefined>()\\n  const [ignoreExtraneousFields, setIgnoreExtraneousFields] = useState<boolean>(\\n    GraphqlSchemaClass.ignoreExtraneousFields\\n  )\\n\\n  const toggleIgnoreExtraneousFields = useCallback(() => {\\n    setIgnoreExtraneousFields(!ignoreExtraneousFields)\\n  }, [ignoreExtraneousFields])\\n\\n  const handleAdd = (a: any) => {\\n    setObject(a.updated_src)\\n  }\\n  const handleDelete = (a: any) => {\\n    setObject(a.updated_src)\\n  }\\n  const handleEdit = (a: any) => {\\n    setObject(a.updated_src)\\n  }\\n\\n  const handleSubmit = useCallback(() => {\\n    console.log('H', object)\\n    setError(undefined)\\n    let node: DocumentNode\\n    try {\\n      try {\\n        node = gql(schema)\\n      } catch (err) {\\n        err.message = `Invalid GraphQLSchema: ${err.message}`\\n        throw err\\n      }\\n      const Model = class extends GraphqlSchemaClass<any> {\\n        static schema = node\\n        static scalars = {\\n          JSON: JSONResolver,\\n        }\\n        static ignoreExtraneousFields = ignoreExtraneousFields\\n      }\\n      const model = new Model(object)\\n      setResult(model.toJSON())\\n    } catch (err) {\\n      setError(err)\\n    }\\n  }, [object, schema, ignoreExtraneousFields])\\n\\n  useEffect(handleSubmit, [object, schema, ignoreExtraneousFields])\\n\\n  return (\\n    <div>\\n      <Typography variant=\\\"h5\\\">GraphQL Schema</Typography>\\n      <div style={{ padding: 12 }}>\\n        <Typography>First define your schema with GraphQL</Typography>\\n        <TextField\\n          multiline\\n          value={schema}\\n          fullWidth\\n          onChange={(e) => {\\n            setSchema(e.target.value)\\n          }}\\n          variant=\\\"filled\\\"\\n        />\\n        <Accordion>\\n          <AccordionSummary>\\n            <Typography variant=\\\"h6\\\">More options...</Typography>\\n          </AccordionSummary>\\n          <AccordionDetails>\\n            <div style={{ flex: 1 }}>\\n              <Typography variant=\\\"h6\\\">Extraneous fields</Typography>\\n              <FormControlLabel\\n                label=\\\"Ignore extraneous fields\\\"\\n                control={\\n                  <Checkbox\\n                    checked={ignoreExtraneousFields}\\n                    onChange={toggleIgnoreExtraneousFields}\\n                  />\\n                }\\n              />\\n              <Typography variant=\\\"h6\\\">Scalars</Typography>\\n              <List>\\n                <ListItem dense button>\\n                  <ListItemIcon>\\n                    <Checkbox\\n                      edge=\\\"start\\\"\\n                      checked\\n                      tabIndex={-1}\\n                      disableRipple\\n                    />\\n                  </ListItemIcon>\\n                  <ListItemText primary=\\\"JSON\\\" />\\n                </ListItem>\\n              </List>\\n            </div>\\n          </AccordionDetails>\\n        </Accordion>\\n      </div>\\n      <Typography variant=\\\"h5\\\">Candidate</Typography>\\n      <div style={{ padding: 12 }}>\\n        <Typography>\\n          Now we're going to call the new class constructor with this object:\\n          (you can edit it)\\n        </Typography>\\n        <ReactJson\\n          src={object}\\n          theme=\\\"monokai\\\"\\n          onAdd={handleAdd}\\n          onEdit={handleEdit}\\n          onDelete={handleDelete}\\n          style={{ padding: 16, fontSize: 16, borderRadius: 8 }}\\n          name=\\\"Variables\\\"\\n        />\\n      </div>\\n      <Typography variant=\\\"h5\\\">Model</Typography>\\n      {Boolean(error) && <Typography>ERROR: {error.message}</Typography>}\\n      {!error && (\\n        <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n      )}\\n    </div>\\n  )\\n}\\n\\nExample.height = 1670\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"graphql-schema-class\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport TextField from '@material-ui/core/TextField'\\nimport React, { useCallback, useEffect, useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { GraphqlSchemaClass } from '@browserql/graphql-schema-class'\\nimport gql from 'graphql-tag'\\nimport Typography from '@material-ui/core/Typography'\\nimport { DocumentNode } from 'graphql'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport List from '@material-ui/core/List'\\nimport ListItem from '@material-ui/core/ListItem'\\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\\nimport ListItemText from '@material-ui/core/ListItemText'\\nimport Checkbox from '@material-ui/core/Checkbox'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\n\\nexport default function Example() {\\n  const [object, setObject] = useState({\\n    a: 'hello',\\n    bar: null,\\n  })\\n  const [schema, setSchema] = useState(`type Foo {\\n  a: String!\\n  bar: Bar\\n}\\n\\ntype Bar {\\n  b: Int!\\n}\\n`)\\n  const [result, setResult] = useState({ foo: null, name: 'me' })\\n  const [error, setError] = useState<Error | undefined>()\\n  const [ignoreExtraneousFields, setIgnoreExtraneousFields] = useState<boolean>(\\n    GraphqlSchemaClass.ignoreExtraneousFields\\n  )\\n\\n  const toggleIgnoreExtraneousFields = useCallback(() => {\\n    setIgnoreExtraneousFields(!ignoreExtraneousFields)\\n  }, [ignoreExtraneousFields])\\n\\n  const handleAdd = (a: any) => {\\n    setObject(a.updated_src)\\n  }\\n  const handleDelete = (a: any) => {\\n    setObject(a.updated_src)\\n  }\\n  const handleEdit = (a: any) => {\\n    setObject(a.updated_src)\\n  }\\n\\n  const handleSubmit = useCallback(() => {\\n    console.log('H', object)\\n    setError(undefined)\\n    let node: DocumentNode\\n    try {\\n      try {\\n        node = gql(schema)\\n      } catch (err) {\\n        err.message = `Invalid GraphQLSchema: ${err.message}`\\n        throw err\\n      }\\n      const Model = class extends GraphqlSchemaClass<any> {\\n        static schema = node\\n        static scalars = {\\n          JSON: JSONResolver,\\n        }\\n        static ignoreExtraneousFields = ignoreExtraneousFields\\n      }\\n      const model = new Model(object)\\n      setResult(model.toJSON())\\n    } catch (err) {\\n      setError(err)\\n    }\\n  }, [object, schema, ignoreExtraneousFields])\\n\\n  useEffect(handleSubmit, [object, schema, ignoreExtraneousFields])\\n\\n  return (\\n    <div>\\n      <Typography variant=\\\"h5\\\">GraphQL Schema</Typography>\\n      <div style={{ padding: 12 }}>\\n        <Typography>First define your schema with GraphQL</Typography>\\n        <TextField\\n          multiline\\n          value={schema}\\n          fullWidth\\n          onChange={(e) => {\\n            setSchema(e.target.value)\\n          }}\\n          variant=\\\"filled\\\"\\n        />\\n        <Accordion>\\n          <AccordionSummary>\\n            <Typography variant=\\\"h6\\\">More options...</Typography>\\n          </AccordionSummary>\\n          <AccordionDetails>\\n            <div style={{ flex: 1 }}>\\n              <Typography variant=\\\"h6\\\">Extraneous fields</Typography>\\n              <FormControlLabel\\n                label=\\\"Ignore extraneous fields\\\"\\n                control={\\n                  <Checkbox\\n                    checked={ignoreExtraneousFields}\\n                    onChange={toggleIgnoreExtraneousFields}\\n                  />\\n                }\\n              />\\n              <Typography variant=\\\"h6\\\">Scalars</Typography>\\n              <List>\\n                <ListItem dense button>\\n                  <ListItemIcon>\\n                    <Checkbox\\n                      edge=\\\"start\\\"\\n                      checked\\n                      tabIndex={-1}\\n                      disableRipple\\n                    />\\n                  </ListItemIcon>\\n                  <ListItemText primary=\\\"JSON\\\" />\\n                </ListItem>\\n              </List>\\n            </div>\\n          </AccordionDetails>\\n        </Accordion>\\n      </div>\\n      <Typography variant=\\\"h5\\\">Candidate</Typography>\\n      <div style={{ padding: 12 }}>\\n        <Typography>\\n          Now we're going to call the new class constructor with this object:\\n          (you can edit it)\\n        </Typography>\\n        <ReactJson\\n          src={object}\\n          theme=\\\"monokai\\\"\\n          onAdd={handleAdd}\\n          onEdit={handleEdit}\\n          onDelete={handleDelete}\\n          style={{ padding: 16, fontSize: 16, borderRadius: 8 }}\\n          name=\\\"Variables\\\"\\n        />\\n      </div>\\n      <Typography variant=\\\"h5\\\">Model</Typography>\\n      {Boolean(error) && <Typography>ERROR: {error.message}</Typography>}\\n      {!error && (\\n        <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n      )}\\n    </div>\\n  )\\n}\\n\\nExample.height = 1670\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "graphql-schema-class",
    "name": "value-parser",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport TextField from '@material-ui/core/TextField'\\nimport React, { useCallback, useEffect, useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { parseGraphqlValue } from '@browserql/graphql-schema-class'\\nimport gql from 'graphql-tag'\\nimport Typography from '@material-ui/core/Typography'\\nimport { DocumentNode } from 'graphql'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport List from '@material-ui/core/List'\\nimport ListItem from '@material-ui/core/ListItem'\\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\\nimport ListItemText from '@material-ui/core/ListItemText'\\nimport Checkbox from '@material-ui/core/Checkbox'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport { parseKind } from '@browserql/fpql'\\n\\nexport default function Example() {\\n  const [schema, setSchema] = useState(`\\ntype Foo {\\n  a: String!\\n  bar: Bar\\n}\\n\\ntype Bar {\\n  b: Int!\\n}\\n`)\\n  const [parsed, setParsed] = useState<any>(null)\\n  const [error, setError] = useState<Error | undefined>()\\n  const [kind, setKind] = useState('String')\\n  const [value, setValue] = useState(null)\\n\\n  const handleSubmit = useCallback(() => {\\n    setError(undefined)\\n    let node: DocumentNode\\n    try {\\n      try {\\n        node = gql(schema)\\n      } catch (err) {\\n        err.message = `Invalid GraphQLSchema: ${err.message}`\\n        throw err\\n      }\\n      const parsedKind = parseKind(kind)\\n      setParsed(parseGraphqlValue(value, parseKind(kind), node))\\n    } catch (err) {\\n      setError(err)\\n    }\\n  }, [value, kind, schema])\\n\\n  const handleEdit = useCallback((a) => {\\n    if (a.name === 'kind') {\\n      setKind(a.new_value)\\n    } else if (a.name === 'value') {\\n      setValue(a.new_value)\\n    }\\n  }, [])\\n\\n  useEffect(handleSubmit, [value, kind, schema])\\n\\n  return (\\n    <div>\\n      <div style={{ padding: 12 }}>\\n        <ReactJson\\n          src={{ kind, value }}\\n          theme=\\\"monokai\\\"\\n          style={{ padding: 16, fontSize: 16, borderRadius: 8 }}\\n          name=\\\"Edit these fields\\\"\\n          onEdit={handleEdit}\\n        />\\n        <div style={{ height: 25 }} />\\n        <ReactJson\\n          src={{ result: parsed }}\\n          theme=\\\"monokai\\\"\\n          style={{ padding: 16, fontSize: 16, borderRadius: 8 }}\\n          name=\\\"And check result here\\\"\\n        />\\n      </div>\\n      <Accordion>\\n        <AccordionSummary>\\n          <Typography variant=\\\"h6\\\">GraphQL schema</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <div style={{ padding: 12, flex: 1 }}>\\n            <TextField\\n              multiline\\n              value={schema}\\n              fullWidth\\n              onChange={(e) => {\\n                setSchema(e.target.value)\\n              }}\\n              variant=\\\"filled\\\"\\n            />\\n          </div>\\n        </AccordionDetails>\\n      </Accordion>\\n      {Boolean(error) && <Typography>ERROR: {error.message}</Typography>}\\n    </div>\\n  )\\n}\\n\\nExample.height = 1670\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"graphql-schema-class\",\n    \"name\": \"value-parser\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport Button from '@material-ui/core/Button'\\nimport TextField from '@material-ui/core/TextField'\\nimport React, { useCallback, useEffect, useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { parseGraphqlValue } from '@browserql/graphql-schema-class'\\nimport gql from 'graphql-tag'\\nimport Typography from '@material-ui/core/Typography'\\nimport { DocumentNode } from 'graphql'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport List from '@material-ui/core/List'\\nimport ListItem from '@material-ui/core/ListItem'\\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\\nimport ListItemText from '@material-ui/core/ListItemText'\\nimport Checkbox from '@material-ui/core/Checkbox'\\nimport { JSONResolver } from 'graphql-scalars'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport { parseKind } from '@browserql/fpql'\\n\\nexport default function Example() {\\n  const [schema, setSchema] = useState(`\\ntype Foo {\\n  a: String!\\n  bar: Bar\\n}\\n\\ntype Bar {\\n  b: Int!\\n}\\n`)\\n  const [parsed, setParsed] = useState<any>(null)\\n  const [error, setError] = useState<Error | undefined>()\\n  const [kind, setKind] = useState('String')\\n  const [value, setValue] = useState(null)\\n\\n  const handleSubmit = useCallback(() => {\\n    setError(undefined)\\n    let node: DocumentNode\\n    try {\\n      try {\\n        node = gql(schema)\\n      } catch (err) {\\n        err.message = `Invalid GraphQLSchema: ${err.message}`\\n        throw err\\n      }\\n      const parsedKind = parseKind(kind)\\n      setParsed(parseGraphqlValue(value, parseKind(kind), node))\\n    } catch (err) {\\n      setError(err)\\n    }\\n  }, [value, kind, schema])\\n\\n  const handleEdit = useCallback((a) => {\\n    if (a.name === 'kind') {\\n      setKind(a.new_value)\\n    } else if (a.name === 'value') {\\n      setValue(a.new_value)\\n    }\\n  }, [])\\n\\n  useEffect(handleSubmit, [value, kind, schema])\\n\\n  return (\\n    <div>\\n      <div style={{ padding: 12 }}>\\n        <ReactJson\\n          src={{ kind, value }}\\n          theme=\\\"monokai\\\"\\n          style={{ padding: 16, fontSize: 16, borderRadius: 8 }}\\n          name=\\\"Edit these fields\\\"\\n          onEdit={handleEdit}\\n        />\\n        <div style={{ height: 25 }} />\\n        <ReactJson\\n          src={{ result: parsed }}\\n          theme=\\\"monokai\\\"\\n          style={{ padding: 16, fontSize: 16, borderRadius: 8 }}\\n          name=\\\"And check result here\\\"\\n        />\\n      </div>\\n      <Accordion>\\n        <AccordionSummary>\\n          <Typography variant=\\\"h6\\\">GraphQL schema</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <div style={{ padding: 12, flex: 1 }}>\\n            <TextField\\n              multiline\\n              value={schema}\\n              fullWidth\\n              onChange={(e) => {\\n                setSchema(e.target.value)\\n              }}\\n              variant=\\\"filled\\\"\\n            />\\n          </div>\\n        </AccordionDetails>\\n      </Accordion>\\n      {Boolean(error) && <Typography>ERROR: {error.message}</Typography>}\\n    </div>\\n  )\\n}\\n\\nExample.height = 1670\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "graphiql",
    "name": "usage",
    "bundle": "# GraphiQL\n\n`browserql` implementation for [GraphiQL](http://graphiql.com)\n\n```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import { BrowserqlProvider } from '@browserql/react'\\nimport React from 'react'\\nimport View from './view'\\nimport { schema } from '../loaders'\\n\\nexport default function Example() {\\n  const queries = {\\n    sayHello({ to }: { to: string }) {\\n      return `hello ${to}`\\n    },\\n  }\\n\\n  const mutations = {\\n    sayByeTo({ to }: { to: string }) {\\n      return `bye ${to}`\\n    },\\n  }\\n\\n  return (\\n    <BrowserqlProvider schema={schema} queries={queries} mutations={mutations}>\\n      <div\\n        style={{\\n          position: 'relative',\\n          height: 700,\\n        }}\\n      >\\n        <View />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 700\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"graphiql\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import { BrowserqlProvider } from '@browserql/react'\\nimport React from 'react'\\nimport View from './view'\\nimport { schema } from '../loaders'\\n\\nexport default function Example() {\\n  const queries = {\\n    sayHello({ to }: { to: string }) {\\n      return `hello ${to}`\\n    },\\n  }\\n\\n  const mutations = {\\n    sayByeTo({ to }: { to: string }) {\\n      return `bye ${to}`\\n    },\\n  }\\n\\n  return (\\n    <BrowserqlProvider schema={schema} queries={queries} mutations={mutations}>\\n      <div\\n        style={{\\n          position: 'relative',\\n          height: 700,\\n        }}\\n      >\\n        <View />\\n      </div>\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 700\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type Query {\\n  sayHello(to: String!): String!\\n}\\n\\ntype Mutation {\\n  sayByeTo(to: String!): String!\\n}\\n\"\n      },\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import GraphiQL from '@browserql/graphiql'\\nimport { BrowserqlContext } from '@browserql/react'\\nimport React, { useContext } from 'react'\\n\\nexport default function View() {\\n  const ctx = useContext(BrowserqlContext)\\n  const defaultQuery = '{ sayHello(to: \\\"everybody\\\") }'\\n  const response = JSON.stringify(\\n    {\\n      data: {\\n        sayHello: 'hello everybdoy',\\n      },\\n      loading: false,\\n      networkStatus: 7,\\n      stale: false,\\n    },\\n    null,\\n    2\\n  )\\n  return (\\n    <GraphiQL\\n      graphiqlProps={{\\n        defaultQuery,\\n        query: defaultQuery,\\n        defaultSecondaryEditorOpen: true,\\n        headerEditorEnabled: true,\\n        response,\\n      }}\\n      client={ctx.apollo}\\n      schema={ctx.schema}\\n    />\\n  )\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Usage\n\n```graphql\ntype Query {\n  sayHello(to: String!): String!\n}\n\ntype Mutation {\n  sayByeTo(to: String!): String!\n}\n```\n\n```typescript\nimport GraphiQL from '@browserql/graphiql'\nimport { BrowserqlContext } from '@browserql/react'\nimport React, { useContext } from 'react'\n\nexport default function View() {\n  const ctx = useContext(BrowserqlContext)\n  const defaultQuery = '{ sayHello(to: \"everybody\") }'\n  const response = JSON.stringify(\n    {\n      data: {\n        sayHello: 'hello everybdoy',\n      },\n      loading: false,\n      networkStatus: 7,\n      stale: false,\n    },\n    null,\n    2\n  )\n  return (\n    <GraphiQL\n      graphiqlProps={{\n        defaultQuery,\n        query: defaultQuery,\n        defaultSecondaryEditorOpen: true,\n        headerEditorEnabled: true,\n        response,\n      }}\n      client={ctx.apollo}\n      schema={ctx.schema}\n    />\n  )\n}\n```\n"
  },
  {
    "module": "http",
    "name": "about",
    "bundle": "Fire HTTP queries from your front end using GraphQL!\n\n## Show me!\n\nIn your `GraphQL` schema, just tag your operations that are meant to fire HTTP requests with our `http` directive:\n\n```graphql\ntype Query {\n  getTodo(id: ID!): Todo\n    @http(url: \"https://jsonplaceholder.typicode.com/todos/:id\")\n}\n\ntype Todo {\n  completed: Boolean!\n  id: ID!\n  title: String!\n  userId: ID!\n}\n```\n\nNow just fire a `GraphQL` query:\n\n```graphql\nquery {\n  getTodo(id: 2) {\n    completed\n    id\n    title\n    userId\n  }\n}\n```\n\nThis is the result from the HTTP request:\n\n```react\n{\n  \"file\": {\n    \"name\": \"app.tsx\",\n    \"source\": \"import { BrowserqlProvider } from '@browserql/react'\\nimport * as React from 'react'\\nimport { connectHttp } from '@browserql/http'\\nimport { JSONResolver } from 'graphql-scalars'\\n\\nimport Response from './response'\\nimport { schema } from '../loaders'\\n\\nexport default function Example() {\\n  return (\\n    <BrowserqlProvider\\n      schema={schema}\\n      extensions={[connectHttp()]}\\n      scalars={{\\n        JSON: JSONResolver,\\n      }}\\n    >\\n      <Response id={2} />\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 340\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"http\",\n    \"name\": \"about\",\n    \"files\": [\n      {\n        \"name\": \"app.tsx\",\n        \"source\": \"import { BrowserqlProvider } from '@browserql/react'\\nimport * as React from 'react'\\nimport { connectHttp } from '@browserql/http'\\nimport { JSONResolver } from 'graphql-scalars'\\n\\nimport Response from './response'\\nimport { schema } from '../loaders'\\n\\nexport default function Example() {\\n  return (\\n    <BrowserqlProvider\\n      schema={schema}\\n      extensions={[connectHttp()]}\\n      scalars={{\\n        JSON: JSONResolver,\\n      }}\\n    >\\n      <Response id={2} />\\n    </BrowserqlProvider>\\n  )\\n}\\n\\nExample.height = 340\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"query {\\n  getTodo(id: 2) {\\n    completed\\n    id\\n    title\\n    userId\\n  }\\n}\\n\"\n      },\n      {\n        \"name\": \"response.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport { makeExecutableQuery } from '@browserql/executable'\\nimport { useQuery } from '@apollo/client'\\n\\nimport { schema } from '../loaders'\\n\\nconst query = makeExecutableQuery(schema, 'getTodo')\\n\\nexport default function Response({ id }: { id: number }) {\\n  const { data, loading, error } = useQuery(query, {\\n    variables: { id },\\n  })\\n\\n  if (error) return <div>{error.message}</div>\\n\\n  if (loading) return <div>Loading...</div>\\n\\n  return <Code language=\\\"json\\\" value={JSON.stringify(data, null, 2)} />\\n}\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type Query {\\n  getTodo(id: ID!): Todo\\n    @http(url: \\\"https://jsonplaceholder.typicode.com/todos/:id\\\")\\n}\\n\\ntype Todo {\\n  completed: Boolean!\\n  id: ID!\\n  title: String!\\n  userId: ID!\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "react",
    "name": "use-query",
    "bundle": "A React component that wraps the apollo hooks. They do the same thing as hooks -- you would use them for cosmetic preferences only.\n\n## Side-to-side comparison with Apollo Hooks\n\n```component2\n{\n  \"component\": \"UseQuerySideToSideComparison\",\n  \"props\": {}\n}\n```\n\n## Variables\n\nIf the query has variables, enter them via the `variables` prop:\n\n```javascript\nfunction View() {\n  return <UseQuery query={GET_USER} variables={{ id: '1' }} />\n}\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import { makeExecutableQuery } from '@browserql/executable'\\nimport { BrowserqlProvider, UseQuery } from '@browserql/react'\\nimport Typography from '@material-ui/core/Typography'\\nimport gql from 'graphql-tag'\\nimport React from 'react'\\nimport { print } from 'graphql'\\nimport Code from '@browserql/components/Code'\\nimport TabNav from '@browserql/components/TabNav'\\nimport TextField from '@material-ui/core/TextField'\\nimport Example from './example'\\n\\nexport default function UseQueryVariables() {\\n  const schema = gql`\\n    type Query {\\n      getUser(id: ID!): User\\n    }\\n\\n    type User {\\n      id: ID!\\n      name: String!\\n    }\\n  `\\n  const query = makeExecutableQuery(schema, 'getUser')\\n  const data = {\\n    users: [\\n      {\\n        id: '1',\\n        name: 'user1',\\n      },\\n      {\\n        id: '2',\\n        name: 'user2',\\n      },\\n      {\\n        id: '3',\\n        name: 'user3',\\n      },\\n    ],\\n  }\\n  function getUser({ id }: { id: string }) {\\n    return data.users.find((user) => user.id === id)\\n  }\\n  function View(props: { id: string }) {\\n    const { id } = props\\n    return (\\n      <BrowserqlProvider schema={schema} queries={{ getUser }}>\\n        <Example query={query} id={id} />\\n      </BrowserqlProvider>\\n    )\\n  }\\n  return (\\n    <TabNav\\n      selected={5}\\n      tabs={[\\n        {\\n          tab: 'Schema',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The GraphQL schema.</Typography>\\n              <Code language=\\\"graphql\\\" value={print(schema)} />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Query',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The GraphQL query.</Typography>\\n              <Code language=\\\"graphql\\\" value={print(query)} />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Data',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The data we'll be querying.</Typography>\\n              <Code language=\\\"json\\\" value={JSON.stringify(data, null, 2)} />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Resolver',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The resolver query we'll use to get user.</Typography>\\n              <Code\\n                language=\\\"javascript\\\"\\n                value={`function getUser({ id }) {\\n  return data.users.find((user) => user.id === id)\\n}`}\\n              />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'React',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The React view we'll use.</Typography>\\n              <Code\\n                language=\\\"javascript\\\"\\n                value={`function View({ id }) {\\n  return (\\n    <BrowserqlProvider schema={schema} queries={{ getUser }}>\\n      <UseQuery\\n        query={query}\\n        variables={{ id }}\\n      >\\n        {({ getUser: user }) => (\\n          <div>\\n            {user === null && <p>No user found with id {id}</p>}\\n            {user !== null && (\\n              <p>\\n                User #{id} is named \\\"{user.name}\\\"\\n              </p>\\n            )}\\n          </div>\\n        )}\\n      </UseQuery>\\n    </BrowserqlProvider>\\n  )\\n}`}\\n              />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Result',\\n          component: () => {\\n            const [userId, setUserId] = React.useState('1')\\n            return (\\n              <div\\n                style={{\\n                  padding: 12,\\n                  display: 'flex',\\n                  justifyContent: 'center',\\n                }}\\n              >\\n                <div>\\n                  <TextField\\n                    label=\\\"User ID\\\"\\n                    value={userId}\\n                    onChange={(e) => setUserId(e.target.value)}\\n                  />\\n                  {!userId && <p>Enter a user id</p>}\\n                  {userId && <View id={userId} />}\\n                </div>\\n              </div>\\n            )\\n          },\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nUseQueryVariables.height = 500\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"react\",\n    \"name\": \"use-query\",\n    \"files\": [\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import React from 'react'\\nimport type { DocumentNode } from 'graphql'\\nimport { UseQuery } from '@browserql/react'\\n\\ninterface Props {\\n  query: DocumentNode\\n  id: string\\n}\\n\\nexport default function Example({ query, id }: Props) {\\n  return (\\n    <UseQuery\\n      query={query}\\n      variables={{ id }}\\n      renderError={(e) => <h5>{e.message}</h5>}\\n    >\\n      {({ getUser: user }) => (\\n        <div>\\n          {user === null && <p>No user found with id {id}</p>}\\n          {user !== null && (\\n            <p>\\n              User #{id} is named \\\"{user.name}\\\"\\n            </p>\\n          )}\\n        </div>\\n      )}\\n    </UseQuery>\\n  )\\n}\\n\"\n      },\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import { makeExecutableQuery } from '@browserql/executable'\\nimport { BrowserqlProvider, UseQuery } from '@browserql/react'\\nimport Typography from '@material-ui/core/Typography'\\nimport gql from 'graphql-tag'\\nimport React from 'react'\\nimport { print } from 'graphql'\\nimport Code from '@browserql/components/Code'\\nimport TabNav from '@browserql/components/TabNav'\\nimport TextField from '@material-ui/core/TextField'\\nimport Example from './example'\\n\\nexport default function UseQueryVariables() {\\n  const schema = gql`\\n    type Query {\\n      getUser(id: ID!): User\\n    }\\n\\n    type User {\\n      id: ID!\\n      name: String!\\n    }\\n  `\\n  const query = makeExecutableQuery(schema, 'getUser')\\n  const data = {\\n    users: [\\n      {\\n        id: '1',\\n        name: 'user1',\\n      },\\n      {\\n        id: '2',\\n        name: 'user2',\\n      },\\n      {\\n        id: '3',\\n        name: 'user3',\\n      },\\n    ],\\n  }\\n  function getUser({ id }: { id: string }) {\\n    return data.users.find((user) => user.id === id)\\n  }\\n  function View(props: { id: string }) {\\n    const { id } = props\\n    return (\\n      <BrowserqlProvider schema={schema} queries={{ getUser }}>\\n        <Example query={query} id={id} />\\n      </BrowserqlProvider>\\n    )\\n  }\\n  return (\\n    <TabNav\\n      selected={5}\\n      tabs={[\\n        {\\n          tab: 'Schema',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The GraphQL schema.</Typography>\\n              <Code language=\\\"graphql\\\" value={print(schema)} />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Query',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The GraphQL query.</Typography>\\n              <Code language=\\\"graphql\\\" value={print(query)} />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Data',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The data we'll be querying.</Typography>\\n              <Code language=\\\"json\\\" value={JSON.stringify(data, null, 2)} />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Resolver',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The resolver query we'll use to get user.</Typography>\\n              <Code\\n                language=\\\"javascript\\\"\\n                value={`function getUser({ id }) {\\n  return data.users.find((user) => user.id === id)\\n}`}\\n              />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'React',\\n          component: () => (\\n            <div style={{ padding: 12 }}>\\n              <Typography>The React view we'll use.</Typography>\\n              <Code\\n                language=\\\"javascript\\\"\\n                value={`function View({ id }) {\\n  return (\\n    <BrowserqlProvider schema={schema} queries={{ getUser }}>\\n      <UseQuery\\n        query={query}\\n        variables={{ id }}\\n      >\\n        {({ getUser: user }) => (\\n          <div>\\n            {user === null && <p>No user found with id {id}</p>}\\n            {user !== null && (\\n              <p>\\n                User #{id} is named \\\"{user.name}\\\"\\n              </p>\\n            )}\\n          </div>\\n        )}\\n      </UseQuery>\\n    </BrowserqlProvider>\\n  )\\n}`}\\n              />\\n            </div>\\n          ),\\n        },\\n        {\\n          tab: 'Result',\\n          component: () => {\\n            const [userId, setUserId] = React.useState('1')\\n            return (\\n              <div\\n                style={{\\n                  padding: 12,\\n                  display: 'flex',\\n                  justifyContent: 'center',\\n                }}\\n              >\\n                <div>\\n                  <TextField\\n                    label=\\\"User ID\\\"\\n                    value={userId}\\n                    onChange={(e) => setUserId(e.target.value)}\\n                  />\\n                  {!userId && <p>Enter a user id</p>}\\n                  {userId && <View id={userId} />}\\n                </div>\\n              </div>\\n            )\\n          },\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nUseQueryVariables.height = 500\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Rendering loading states\n\nBy default, a loading state returns an empty `React` fragment.\n\nYou can specify a loading view via the `renderLoading` prop:\n\n```javascript\nfunction User {\n  return (\n    <UseQuery\n      query={GET_USER}\n      renderLoading={<div>Loading..</div>}\n    />\n  )\n}\n```\n\n```snapshot2\nReact.UseQueryLoading\n```\n\n## Handling errors\n\nBy default, an error state returns an empty `React` fragment.\n\nYou can specify an error view via the `renderError` prop which accepts a function that returns a `React Element`:\n\n```javascript\nfunction User {\n  return (\n    <UseQuery\n      query={GET_USER}\n      renderError={({ error }) => <div>{error.message}</div>}\n    />\n  )\n}\n```\n\n```snapshot2\nReact.UseQueryError\n```\n\n## Lazy loading\n\nBy default, when requiring a query, the latter gets executed right away.\n\nYou can choose lazy mode instead so you can call the query whenever you want.\n\n```javascript\nfunction User {\n  return (\n    <UseQuery lazy query={GET_USER}>\n      {(getUser, data, { loading }) => (\n        <button onClick={() => getUser({ id: 1234 })} disabled={loading}>\n          {data && !data.getUser && 'No user found'}\n          {data && data.getUser && data.getUser.name}\n          {!data && loading && 'Loading'}\n          {!data && !loading && 'Anonymous'}\n        </button>\n      )}\n    </UseQuery>\n  )\n}\n```\n\n```snapshot2\nReact.UseLazyQuery\n```\n"
  },
  {
    "module": "schema-composer",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"view.tsx\",\n    \"source\": \"import React from 'react'\\nimport SchemaComposer from '@browserql/schema-composer'\\nimport TextField from '@material-ui/core/TextField'\\nimport gql from 'graphql-tag'\\n\\nexport default function View() {\\n  const schema = `\\n  type Foo {\\n    id: ID\\n    bar: Boolean!\\n  }\\n\\n  type Bar {\\n    foo: Float\\n  }\\n  `\\n  return (\\n    <div>\\n      <SchemaComposer schema={gql(schema)} />\\n    </div>\\n  )\\n}\\n\\nView.height = 1000\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"schema-composer\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import React from 'react'\\nimport SchemaComposer from '@browserql/schema-composer'\\nimport TextField from '@material-ui/core/TextField'\\nimport gql from 'graphql-tag'\\n\\nexport default function View() {\\n  const schema = `\\n  type Foo {\\n    id: ID\\n    bar: Boolean!\\n  }\\n\\n  type Bar {\\n    foo: Float\\n  }\\n  `\\n  return (\\n    <div>\\n      <SchemaComposer schema={gql(schema)} />\\n    </div>\\n  )\\n}\\n\\nView.height = 1000\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "typescript-generator",
    "name": "try-it",
    "bundle": "```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\\nimport gents, { NULL_STRATEGY } from '@browserql/typescript-generator'\\nimport gql from 'graphql-tag'\\nimport Code from '../Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport Typography from '@material-ui/core/Typography'\\nimport FormGroup from '@material-ui/core/FormGroup'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport Switch from '@material-ui/core/Switch'\\nimport FormControl from '@material-ui/core/FormControl'\\nimport InputLabel from '@material-ui/core/InputLabel'\\nimport Select from '@material-ui/core/Select'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Paper from '@material-ui/core/Paper'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\\n\\nexport default function TryIt() {\\n  const [graphqlCode, setGraphqlCode] = useState(`type User {\\n  name: String!\\n  age: Int\\n  id: ID!\\n}\\n  `)\\n  const [tsCode, setTsCode] = useState(`interface User {\\n  name: string\\n  age: number | null\\n  id: string | number\\n}\\n  `)\\n  const [useExport, setUseExport] = useState(false)\\n  const [useDeclare, setUseDeclare] = useState(false)\\n  const [ID, setID] = useState('string | number')\\n  const [nullStrategy, setNullStrategy] = useState<NULL_STRATEGY[]>([\\n    NULL_STRATEGY.null,\\n  ])\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  useEffect(() => {\\n    try {\\n      setError(undefined)\\n      setTsCode(\\n        gents(gql(graphqlCode), {\\n          useExport,\\n          useDeclare,\\n          ID,\\n          null: nullStrategy,\\n        })\\n      )\\n    } catch (error) {\\n      setError(error)\\n    }\\n  }, [useExport, graphqlCode, useDeclare, ID, nullStrategy])\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const { value } = e.target\\n    setGraphqlCode(value)\\n  }\\n\\n  const handleUseExport = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseExport(!useExport)\\n    },\\n    [useExport]\\n  )\\n\\n  const handleUseDeclare = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseDeclare(!useDeclare)\\n    },\\n    [useDeclare]\\n  )\\n\\n  const handleID = useCallback((e: ChangeEvent<HTMLInputElement>) => {\\n    setID(e.target.value)\\n  }, [])\\n\\n  const handleNull = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\\n    setNullStrategy((e.target.value as unknown) as NULL_STRATEGY[])\\n  }, [])\\n\\n  console.log({ nullStrategy })\\n\\n  return (\\n    <div style={{ padding: 16 }}>\\n      <Accordion\\n        elevation={0}\\n        defaultExpanded\\n        style={{ marginBottom: 22, borderBottom: '1px solid #eee' }}\\n      >\\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\\n          <Typography variant=\\\"h5\\\">Options</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <Paper\\n            style={{ padding: 12, backgroundColor: '#eee', flex: 1 }}\\n            elevation={0}\\n          >\\n            <FormGroup row style={{ justifyContent: 'center' }}>\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useExport}\\n                    onChange={handleUseExport}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use export\\\"\\n              />\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useDeclare}\\n                    onChange={handleUseDeclare}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use declare\\\"\\n              />\\n              <TextField\\n                id=\\\"outlined-basic\\\"\\n                label=\\\"ID\\\"\\n                variant=\\\"outlined\\\"\\n                value={ID}\\n                style={{ width: 150 }}\\n                onChange={handleID}\\n              />\\n              <FormControl variant=\\\"filled\\\" style={{ marginLeft: 12 }}>\\n                <InputLabel id=\\\"demo-simple-select-filled-label\\\">\\n                  Nullable\\n                </InputLabel>\\n                <Select\\n                  labelId=\\\"demo-simple-select-filled-label\\\"\\n                  id=\\\"demo-simple-select-filled\\\"\\n                  value={nullStrategy}\\n                  onChange={handleNull}\\n                  multiple\\n                >\\n                  <MenuItem value=\\\"null\\\">null</MenuItem>\\n                  <MenuItem value=\\\"undefined\\\">undefined</MenuItem>\\n                  <MenuItem value=\\\"missing\\\">missing</MenuItem>\\n                </Select>\\n              </FormControl>\\n            </FormGroup>\\n          </Paper>\\n        </AccordionDetails>\\n      </Accordion>\\n\\n      <div style={{ display: 'flex', gap: 12, marginBottom: 32 }}>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\">GraphQL input</Typography>\\n        </div>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\" align=\\\"right\\\">\\n            Typescript output\\n          </Typography>\\n        </div>\\n      </div>\\n\\n      <div style={{ display: 'flex', gap: 12 }}>\\n        <div style={{ flex: 1 }}>\\n          <TextField\\n            multiline\\n            fullWidth\\n            rows={20}\\n            value={graphqlCode}\\n            onChange={handleChange}\\n            variant=\\\"filled\\\"\\n            InputProps={{\\n              style: {\\n                fontWeight: 'bold',\\n              },\\n            }}\\n          />\\n        </div>\\n        <div\\n          style={{\\n            flex: 1,\\n            border: '2px solid #ddd',\\n            borderRadius: 6,\\n            padding: 8,\\n          }}\\n        >\\n          {error && (\\n            <div>\\n              <Typography>{error.message}</Typography>\\n            </div>\\n          )}\\n          {!error && <pre>{tsCode}</pre>}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nTryIt.height = 800\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"typescript-generator\",\n    \"name\": \"try-it\",\n    \"files\": [\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import React, { ChangeEvent, useCallback, useEffect, useState } from 'react'\\nimport gents, { NULL_STRATEGY } from '@browserql/typescript-generator'\\nimport gql from 'graphql-tag'\\nimport Code from '../Code'\\nimport TextField from '@material-ui/core/TextField'\\nimport Typography from '@material-ui/core/Typography'\\nimport FormGroup from '@material-ui/core/FormGroup'\\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\\nimport Switch from '@material-ui/core/Switch'\\nimport FormControl from '@material-ui/core/FormControl'\\nimport InputLabel from '@material-ui/core/InputLabel'\\nimport Select from '@material-ui/core/Select'\\nimport MenuItem from '@material-ui/core/MenuItem'\\nimport Paper from '@material-ui/core/Paper'\\nimport Accordion from '@material-ui/core/Accordion'\\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\\n\\nexport default function TryIt() {\\n  const [graphqlCode, setGraphqlCode] = useState(`type User {\\n  name: String!\\n  age: Int\\n  id: ID!\\n}\\n  `)\\n  const [tsCode, setTsCode] = useState(`interface User {\\n  name: string\\n  age: number | null\\n  id: string | number\\n}\\n  `)\\n  const [useExport, setUseExport] = useState(false)\\n  const [useDeclare, setUseDeclare] = useState(false)\\n  const [ID, setID] = useState('string | number')\\n  const [nullStrategy, setNullStrategy] = useState<NULL_STRATEGY[]>([\\n    NULL_STRATEGY.null,\\n  ])\\n  const [error, setError] = useState<Error | undefined>()\\n\\n  useEffect(() => {\\n    try {\\n      setError(undefined)\\n      setTsCode(\\n        gents(gql(graphqlCode), {\\n          useExport,\\n          useDeclare,\\n          ID,\\n          null: nullStrategy,\\n        })\\n      )\\n    } catch (error) {\\n      setError(error)\\n    }\\n  }, [useExport, graphqlCode, useDeclare, ID, nullStrategy])\\n\\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\\n    const { value } = e.target\\n    setGraphqlCode(value)\\n  }\\n\\n  const handleUseExport = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseExport(!useExport)\\n    },\\n    [useExport]\\n  )\\n\\n  const handleUseDeclare = useCallback(\\n    (e: ChangeEvent<HTMLInputElement>) => {\\n      setUseDeclare(!useDeclare)\\n    },\\n    [useDeclare]\\n  )\\n\\n  const handleID = useCallback((e: ChangeEvent<HTMLInputElement>) => {\\n    setID(e.target.value)\\n  }, [])\\n\\n  const handleNull = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\\n    setNullStrategy((e.target.value as unknown) as NULL_STRATEGY[])\\n  }, [])\\n\\n  console.log({ nullStrategy })\\n\\n  return (\\n    <div style={{ padding: 16 }}>\\n      <Accordion\\n        elevation={0}\\n        defaultExpanded\\n        style={{ marginBottom: 22, borderBottom: '1px solid #eee' }}\\n      >\\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\\n          <Typography variant=\\\"h5\\\">Options</Typography>\\n        </AccordionSummary>\\n        <AccordionDetails>\\n          <Paper\\n            style={{ padding: 12, backgroundColor: '#eee', flex: 1 }}\\n            elevation={0}\\n          >\\n            <FormGroup row style={{ justifyContent: 'center' }}>\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useExport}\\n                    onChange={handleUseExport}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use export\\\"\\n              />\\n              <FormControlLabel\\n                control={\\n                  <Switch\\n                    checked={useDeclare}\\n                    onChange={handleUseDeclare}\\n                    color=\\\"primary\\\"\\n                  />\\n                }\\n                label=\\\"Use declare\\\"\\n              />\\n              <TextField\\n                id=\\\"outlined-basic\\\"\\n                label=\\\"ID\\\"\\n                variant=\\\"outlined\\\"\\n                value={ID}\\n                style={{ width: 150 }}\\n                onChange={handleID}\\n              />\\n              <FormControl variant=\\\"filled\\\" style={{ marginLeft: 12 }}>\\n                <InputLabel id=\\\"demo-simple-select-filled-label\\\">\\n                  Nullable\\n                </InputLabel>\\n                <Select\\n                  labelId=\\\"demo-simple-select-filled-label\\\"\\n                  id=\\\"demo-simple-select-filled\\\"\\n                  value={nullStrategy}\\n                  onChange={handleNull}\\n                  multiple\\n                >\\n                  <MenuItem value=\\\"null\\\">null</MenuItem>\\n                  <MenuItem value=\\\"undefined\\\">undefined</MenuItem>\\n                  <MenuItem value=\\\"missing\\\">missing</MenuItem>\\n                </Select>\\n              </FormControl>\\n            </FormGroup>\\n          </Paper>\\n        </AccordionDetails>\\n      </Accordion>\\n\\n      <div style={{ display: 'flex', gap: 12, marginBottom: 32 }}>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\">GraphQL input</Typography>\\n        </div>\\n        <div style={{ flex: 1 }}>\\n          <Typography variant=\\\"h5\\\" align=\\\"right\\\">\\n            Typescript output\\n          </Typography>\\n        </div>\\n      </div>\\n\\n      <div style={{ display: 'flex', gap: 12 }}>\\n        <div style={{ flex: 1 }}>\\n          <TextField\\n            multiline\\n            fullWidth\\n            rows={20}\\n            value={graphqlCode}\\n            onChange={handleChange}\\n            variant=\\\"filled\\\"\\n            InputProps={{\\n              style: {\\n                fontWeight: 'bold',\\n              },\\n            }}\\n          />\\n        </div>\\n        <div\\n          style={{\\n            flex: 1,\\n            border: '2px solid #ddd',\\n            borderRadius: 6,\\n            padding: 8,\\n          }}\\n        >\\n          {error && (\\n            <div>\\n              <Typography>{error.message}</Typography>\\n            </div>\\n          )}\\n          {!error && <pre>{tsCode}</pre>}\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nTryIt.height = 800\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "client",
    "name": "resolvers",
    "bundle": "The following resolvers are supported:\n\n- queries\n- mutations\n- scalars\n- directives\n\nThey are all a dictionnary of functions that receive the following parameters:\n\n- `variables`\n- `context`\n\nThe context has a reference to the browserql client accessible via `context.browserqlClient`\n\n### Queries and mutations\n\nIn this example, we'll use the cache-only state system to store a flag.\n\nThis is a good example because here the queries and the mutations are using their context argument in order to access apollo's cache.\n\nThis is the schema we'll use:\n\n```graphql\n# defs\ntype Query {\n  isLoggedIn: Boolean\n}\n\ntype Mutation {\n  login: Boolean\n  logout: Boolean\n}\n```\n\nThis is the query we'll use:\n\n```graphql\n# IS_LOGGED_IN\nquery {\n  isLoggedIn\n}\n```\n\nAnd the mutations we'll use\n\n```graphql\n# LOGIN\nmutation LOGIN {\n  login\n}\n```\n\n```graphql\n# LOGOUT\nmutation LOGOUT {\n  logout\n}\n```\n\nNow we create the client:\n\n```javascript\nimport gql from 'graphql-tag'\nimport cacheql from '@browserql/cache'\nimport IS_LOGGED_IN from './IS_LOGGED_IN.graphql'\n\n// Our query resolver\nconst isLoggedIn = () => false // default value\n\n// Our mutation resolvers\nconst login = (_variables, context) => {\n  const { cache, schema } = context.browserqlClient\n  cacheql(cache, schema).set(IS_LOGGED_IN, true)\n}\nconst logout = (_variables, context) => {\n  const { cache, schema } = context.browserqlClient\n  cacheql(cache, schema).set(IS_LOGGED_IN, false)\n}\n\n// Now we connect everything\nconst { client } = connect({\n  schema: defs,\n  queries: { isLoggedIn },\n  mutations: { login, logout },\n})\n\nexport default client\n```\n\n```typescript\nimport Button from '@material-ui/core/Button'\nimport React from 'react'\nimport { withMutation, UseQuery } from '@browserql/react'\nimport { flowRight } from 'lodash'\n\nimport IS_LOGGED_IN from './IS_LOGGED_IN.graphql'\n\nexport default flowRight(\n  withMutation`login`(LOGIN),\n  withMutation`logout`(LOGOUT)\n)(function Inner({ login, logout }) {\n  return (\n    <UseQuery query={IS_LOGGED_IN}>\n      {({ isLoggedIn }) => (\n        <Button\n          fullWidth\n          onClick={isLoggedIn ? login.execute : logout.execute}\n          color={isLoggedIn ? 'secondary' : 'primary'}\n          variant=\"contained\"\n        >\n          {isLoggedIn ? 'Log out' : 'Log in'}\n        </Button>\n      )}\n    </UseQuery>\n  )\n})\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"app.tsx\",\n    \"source\": \"import { BrowserqlProvider } from '@browserql/react'\\nimport React from 'react'\\n\\nimport Inner from './view'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default function View() {\\n  return (\\n    <BrowserqlProvider schema={SCHEMA}>\\n      <Inner />\\n    </BrowserqlProvider>\\n  )\\n}\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"client\",\n    \"name\": \"resolvers\",\n    \"files\": [\n      {\n        \"name\": \"LOGIN.graphql\",\n        \"source\": \"# LOGIN\\nmutation LOGIN {\\n  login\\n}\\n\"\n      },\n      {\n        \"name\": \"IS_LOGGED_IN.graphql\",\n        \"source\": \"# IS_LOGGED_IN\\nquery {\\n  isLoggedIn\\n}\\n\"\n      },\n      {\n        \"name\": \"LOGOUT.graphql\",\n        \"source\": \"# LOGOUT\\nmutation LOGOUT {\\n  logout\\n}\\n\"\n      },\n      {\n        \"name\": \"app.tsx\",\n        \"source\": \"import { BrowserqlProvider } from '@browserql/react'\\nimport React from 'react'\\n\\nimport Inner from './view'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default function View() {\\n  return (\\n    <BrowserqlProvider schema={SCHEMA}>\\n      <Inner />\\n    </BrowserqlProvider>\\n  )\\n}\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"# defs\\ntype Query {\\n  isLoggedIn: Boolean\\n}\\n\\ntype Mutation {\\n  login: Boolean\\n  logout: Boolean\\n}\\n\"\n      },\n      {\n        \"name\": \"view.tsx\",\n        \"source\": \"import Button from '@material-ui/core/Button'\\nimport React from 'react'\\nimport { withMutation, UseQuery } from '@browserql/react'\\nimport { flowRight } from 'lodash'\\n\\nimport IS_LOGGED_IN from './IS_LOGGED_IN.graphql'\\n\\nexport default flowRight(\\n  withMutation`login`(LOGIN),\\n  withMutation`logout`(LOGOUT)\\n)(function Inner({ login, logout }) {\\n  return (\\n    <UseQuery query={IS_LOGGED_IN}>\\n      {({ isLoggedIn }) => (\\n        <Button\\n          fullWidth\\n          onClick={isLoggedIn ? login.execute : logout.execute}\\n          color={isLoggedIn ? 'secondary' : 'primary'}\\n          variant=\\\"contained\\\"\\n        >\\n          {isLoggedIn ? 'Log out' : 'Log in'}\\n        </Button>\\n      )}\\n    </UseQuery>\\n  )\\n})\\n\"\n      },\n      {\n        \"name\": \"client.mjs\",\n        \"source\": \"import gql from 'graphql-tag'\\nimport cacheql from '@browserql/cache'\\nimport IS_LOGGED_IN from './IS_LOGGED_IN.graphql'\\n\\n// Our query resolver\\nconst isLoggedIn = () => false // default value\\n\\n// Our mutation resolvers\\nconst login = (_variables, context) => {\\n  const { cache, schema } = context.browserqlClient\\n  cacheql(cache, schema).set(IS_LOGGED_IN, true)\\n}\\nconst logout = (_variables, context) => {\\n  const { cache, schema } = context.browserqlClient\\n  cacheql(cache, schema).set(IS_LOGGED_IN, false)\\n}\\n\\n// Now we connect everything\\nconst { client } = connect({\\n  schema: defs,\\n  queries: { isLoggedIn },\\n  mutations: { login, logout },\\n})\\n\\nexport default client\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Unknown file extension \\\\\\\".graphql\\\\\\\" for /home/fra/Dev/perso/browserql/packages/examples/modules/client/resolvers/files/IS_LOGGED_IN.graphql\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fp",
    "name": "example",
    "bundle": "Functional-Programming wrapper\n\n```javascript\nimport fp from '@browserql/fp'\n\nexport default fp([1, 2, 3])(\n  (numbers) => numbers.map((number) => number + 10), // [11, 12, 13]\n  (numbers) => numbers.reduce((sum, number) => sum + number) // 36\n)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"index-render.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport result from './index.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n}\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fp\",\n    \"name\": \"example\",\n    \"files\": [\n      {\n        \"name\": \"index-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport result from './index.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n}\\n\"\n      },\n      {\n        \"name\": \"promises-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React, { useEffect, useState } from 'react'\\nimport result from './promises.mjs'\\n\\nexport default function App() {\\n  const [resolved, setResolved] = useState<any>(null)\\n  const resolve = async () => {\\n    setResolved(await result())\\n  }\\n  useEffect(() => {\\n    if (!resolved) {\\n      resolve()\\n    }\\n  }, [resolved])\\n  if (!resolved) {\\n    return <div>Loading</div>\\n  }\\n  return <Code language=\\\"json\\\" value={JSON.stringify(resolved, null, 2)} />\\n}\\n\"\n      },\n      {\n        \"name\": \"index.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\n\\nexport default fp([1, 2, 3])(\\n  (numbers) => numbers.map((number) => number + 10), // [11, 12, 13]\\n  (numbers) => numbers.reduce((sum, number) => sum + number) // 36\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"fp is not a function\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"promises.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\n\\nexport default () => fp.promise(1)(\\n  async input => input + 1\\n)\",\n        \"result\": \"undefined\\n\"\n      }\n    ]\n  }\n}\n```\n\n## With promises\n\n```javascript\nimport fp from '@browserql/fp'\n\nexport default () => fp.promise(1)(\n  async input => input + 1\n)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"promises-render.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React, { useEffect, useState } from 'react'\\nimport result from './promises.mjs'\\n\\nexport default function App() {\\n  const [resolved, setResolved] = useState<any>(null)\\n  const resolve = async () => {\\n    setResolved(await result())\\n  }\\n  useEffect(() => {\\n    if (!resolved) {\\n      resolve()\\n    }\\n  }, [resolved])\\n  if (!resolved) {\\n    return <div>Loading</div>\\n  }\\n  return <Code language=\\\"json\\\" value={JSON.stringify(resolved, null, 2)} />\\n}\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fp\",\n    \"name\": \"example\",\n    \"files\": [\n      {\n        \"name\": \"index-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport result from './index.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(result, null, 2)} />\\n}\\n\"\n      },\n      {\n        \"name\": \"promises-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React, { useEffect, useState } from 'react'\\nimport result from './promises.mjs'\\n\\nexport default function App() {\\n  const [resolved, setResolved] = useState<any>(null)\\n  const resolve = async () => {\\n    setResolved(await result())\\n  }\\n  useEffect(() => {\\n    if (!resolved) {\\n      resolve()\\n    }\\n  }, [resolved])\\n  if (!resolved) {\\n    return <div>Loading</div>\\n  }\\n  return <Code language=\\\"json\\\" value={JSON.stringify(resolved, null, 2)} />\\n}\\n\"\n      },\n      {\n        \"name\": \"index.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\n\\nexport default fp([1, 2, 3])(\\n  (numbers) => numbers.map((number) => number + 10), // [11, 12, 13]\\n  (numbers) => numbers.reduce((sum, number) => sum + number) // 36\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"fp is not a function\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"promises.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\n\\nexport default () => fp.promise(1)(\\n  async input => input + 1\\n)\",\n        \"result\": \"undefined\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "executable",
    "name": "usage",
    "bundle": "Tired of writing executable queries/mutations from schema queries/mutations and make sure they stay in-sync? This library generates them for you on the fly directly from the schema.\n\n## Example\n\nImagine you have the following `GraphQL` schema:\n\n```graphql\ntype User {\n  id: ID!\n  email: String!\n}\n\ntype Query {\n  getUser(id: ID!): User\n}\n\ntype Mutation {\n  addUser(email: String!): User!\n}\n```\n\nThis is how you would generate an executable query from it:\n\n```javascript\nimport { makeExecutableQuery } from '@browserql/executable'\nimport { SCHEMA } from '../loaders'\n\nexport default makeExecutableQuery(SCHEMA, 'getUser')\n```\n\nAnd this is the query it returns:\n\n```react\n{\n  \"file\": {\n    \"name\": \"query-render.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport QUERY from './query.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(QUERY)} />\\n}\\n\\nApp.height = 320\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"executable\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"mutation-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport MUTATION from './mutation.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(MUTATION)} />\\n}\\n\\nApp.height = 400\\n\"\n      },\n      {\n        \"name\": \"query-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport QUERY from './query.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(QUERY)} />\\n}\\n\\nApp.height = 320\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type User {\\n  id: ID!\\n  email: String!\\n}\\n\\ntype Query {\\n  getUser(id: ID!): User\\n}\\n\\ntype Mutation {\\n  addUser(email: String!): User!\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { makeExecutableQuery } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableQuery(SCHEMA, 'getUser')\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find package '/home/fra/Dev/perso/browserql/node_modules/@browserql/executable/' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/executable/usage/files/query.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"mutation.mjs\",\n        \"source\": \"import { makeExecutableMutation } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableMutation(SCHEMA, 'addUser')\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find package '/home/fra/Dev/perso/browserql/node_modules/@browserql/executable/' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/executable/usage/files/mutation.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\nThis is how you would generate an executable mutation from it:\n\n```javascript\nimport { makeExecutableMutation } from '@browserql/executable'\nimport { SCHEMA } from '../loaders'\n\nexport default makeExecutableMutation(SCHEMA, 'addUser')\n```\n\nAnd this is the mutation it returns:\n\n```react\n{\n  \"file\": {\n    \"name\": \"mutation-render.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport MUTATION from './mutation.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(MUTATION)} />\\n}\\n\\nApp.height = 400\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"executable\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"mutation-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport MUTATION from './mutation.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(MUTATION)} />\\n}\\n\\nApp.height = 400\\n\"\n      },\n      {\n        \"name\": \"query-render.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport QUERY from './query.mjs'\\nimport { print } from 'graphql'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={print(QUERY)} />\\n}\\n\\nApp.height = 320\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type User {\\n  id: ID!\\n  email: String!\\n}\\n\\ntype Query {\\n  getUser(id: ID!): User\\n}\\n\\ntype Mutation {\\n  addUser(email: String!): User!\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { makeExecutableQuery } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableQuery(SCHEMA, 'getUser')\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find package '/home/fra/Dev/perso/browserql/node_modules/@browserql/executable/' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/executable/usage/files/query.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"mutation.mjs\",\n        \"source\": \"import { makeExecutableMutation } from '@browserql/executable'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default makeExecutableMutation(SCHEMA, 'addUser')\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find package '/home/fra/Dev/perso/browserql/node_modules/@browserql/executable/' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/executable/usage/files/mutation.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getExecutableOperations",
    "bundle": "Get executable operations\n\n```graphql\nquery {\n  query1\n}\n\nmutation Mutation1 {\n  mutation1\n}\n\nquery Query2 {\n  query2\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getArgument",
    "bundle": "Get node's argument by name.\n\n## Get field's argument\n\nConsider this schema:\n\n```graphql\ntype Foo {\n  bar(alpha: ID): ID\n}\n```\n\nLet's say we want to retrieve the field argument named `alpha` from field `Foo.bar`.\n\nWe'll do it like this:\n\n```javascript\nimport fp from '@browserql/fp'\nimport { getArgument, getField, getType } from '@browserql/fpql'\nimport { GRAPHQL } from '../loaders'\n\nexport default fp(GRAPHQL)(\n  getType('Foo'),\n  getField('bar'),\n  getArgument('alpha')\n)\n```\n\nWhich will return the following node:\n\n```react\n{\n  \"file\": {\n    \"name\": \"field-render.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './field.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArgument\",\n    \"files\": [\n      {\n        \"name\": \"directive-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './directive.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type A @foo(bar: 24) {\\n  id: ID!\\n}\\n\"\n      },\n      {\n        \"name\": \"field-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './field.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"field.graphql\",\n        \"source\": \"type Foo {\\n  bar(alpha: ID): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"query-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './query.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"type Query {\\n  get(id: ID = 1): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"field.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\nimport { getArgument, getField, getType } from '@browserql/fpql'\\nimport { GRAPHQL } from '../loaders'\\n\\nexport default fp(GRAPHQL)(\\n  getType('Foo'),\\n  getField('bar'),\\n  getArgument('alpha')\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/field.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArgument, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default fp(SCHEMA)(\\n  // Get type named A\\n  getType('A'),\\n  // Get in that type directive named foo\\n  getDirective('foo'),\\n  // Get in that directive argument named bar\\n  getArgument('bar')\\n)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/directive.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\nimport { getArgument, getQuery } from '@browserql/fpql'\\nimport { MY_SCHEMA } from '../loaders'\\n\\nexport default fp(MY_SCHEMA)(\\n  getQuery('get'),\\n  getArgument('id')\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/query.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Get query's argument\n\nConsider this schema:\n\n```graphql\ntype Query {\n  get(id: ID = 1): ID\n}\n```\n\nLet's say we want to retrieve the query argument named `id` from query `get`.\n\nWe'll do it like this:\n\n```javascript\nimport fp from '@browserql/fp'\nimport { getArgument, getQuery } from '@browserql/fpql'\nimport { MY_SCHEMA } from '../loaders'\n\nexport default fp(MY_SCHEMA)(\n  getQuery('get'),\n  getArgument('id')\n)\n```\n\nWhich will return the following node:\n\n```react\n{\n  \"file\": {\n    \"name\": \"query-render.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './query.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArgument\",\n    \"files\": [\n      {\n        \"name\": \"directive-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './directive.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type A @foo(bar: 24) {\\n  id: ID!\\n}\\n\"\n      },\n      {\n        \"name\": \"field-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './field.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"field.graphql\",\n        \"source\": \"type Foo {\\n  bar(alpha: ID): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"query-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './query.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"type Query {\\n  get(id: ID = 1): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"field.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\nimport { getArgument, getField, getType } from '@browserql/fpql'\\nimport { GRAPHQL } from '../loaders'\\n\\nexport default fp(GRAPHQL)(\\n  getType('Foo'),\\n  getField('bar'),\\n  getArgument('alpha')\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/field.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArgument, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default fp(SCHEMA)(\\n  // Get type named A\\n  getType('A'),\\n  // Get in that type directive named foo\\n  getDirective('foo'),\\n  // Get in that directive argument named bar\\n  getArgument('bar')\\n)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/directive.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\nimport { getArgument, getQuery } from '@browserql/fpql'\\nimport { MY_SCHEMA } from '../loaders'\\n\\nexport default fp(MY_SCHEMA)(\\n  getQuery('get'),\\n  getArgument('id')\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/query.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Get directive's argument\n\nConsider this schema:\n\n```graphql\ntype A @foo(bar: 24) {\n  id: ID!\n}\n```\n\nLet's say we want to retrieve the directive argument named `bar`.\n\nWe'll do it like this:\n\n```javascript\nimport { getArgument, getType, getDirective } from '@browserql/fpql'\nimport fp from '@browserql/fp'\nimport { SCHEMA } from '../loaders'\n\nexport default fp(SCHEMA)(\n  // Get type named A\n  getType('A'),\n  // Get in that type directive named foo\n  getDirective('foo'),\n  // Get in that directive argument named bar\n  getArgument('bar')\n)\n```\n\nWhich will return the following node:\n\n```react\n{\n  \"file\": {\n    \"name\": \"directive-render.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './directive.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArgument\",\n    \"files\": [\n      {\n        \"name\": \"directive-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './directive.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type A @foo(bar: 24) {\\n  id: ID!\\n}\\n\"\n      },\n      {\n        \"name\": \"field-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './field.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"field.graphql\",\n        \"source\": \"type Foo {\\n  bar(alpha: ID): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"query-render.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARG from './query.mjs'\\n\\nexport default function GetArgument() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARG, null, 2)} />\\n}\\n\\nGetArgument.height = 380\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"type Query {\\n  get(id: ID = 1): ID\\n}\\n\"\n      },\n      {\n        \"name\": \"field.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\nimport { getArgument, getField, getType } from '@browserql/fpql'\\nimport { GRAPHQL } from '../loaders'\\n\\nexport default fp(GRAPHQL)(\\n  getType('Foo'),\\n  getField('bar'),\\n  getArgument('alpha')\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/field.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArgument, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { SCHEMA } from '../loaders'\\n\\nexport default fp(SCHEMA)(\\n  // Get type named A\\n  getType('A'),\\n  // Get in that type directive named foo\\n  getDirective('foo'),\\n  // Get in that directive argument named bar\\n  getArgument('bar')\\n)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/directive.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import fp from '@browserql/fp'\\nimport { getArgument, getQuery } from '@browserql/fpql'\\nimport { MY_SCHEMA } from '../loaders'\\n\\nexport default fp(MY_SCHEMA)(\\n  getQuery('get'),\\n  getArgument('id')\\n)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArgument/files/query.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getKind",
    "bundle": "Get node's kind as a string\n\n```graphql\ntype Query {\n  getUser(id: ID!, includeSettings: Boolean = false): User\n  exists(user: User = { id: 1 }): Boolean\n}\n\ntype User {\n  id: ID!\n}\n```\n\n```javascript\nimport { getArgument, getKind, getQuery } from '@browserql/fpql'\nimport fp from '@browserql/fp'\nimport { schema1 } from '../loaders'\n\nexport default fp(schema1)(getQuery('exists'), getArgument('user'), getKind)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"view-get-query-kind.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport snippet from './snippet-get-query-kind.mjs'\\n\\nexport default function View() {\\n  return <Code language=\\\"text\\\" value={snippet} />\\n}\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getKind\",\n    \"files\": [\n      {\n        \"name\": \"schema-get-query-kind.graphql\",\n        \"source\": \"type Query {\\n  getUser(id: ID!, includeSettings: Boolean = false): User\\n  exists(user: User = { id: 1 }): Boolean\\n}\\n\\ntype User {\\n  id: ID!\\n}\\n\"\n      },\n      {\n        \"name\": \"view-get-query-kind.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport snippet from './snippet-get-query-kind.mjs'\\n\\nexport default function View() {\\n  return <Code language=\\\"text\\\" value={snippet} />\\n}\\n\"\n      },\n      {\n        \"name\": \"snippet-get-query-kind.mjs\",\n        \"source\": \"import { getArgument, getKind, getQuery } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { schema1 } from '../loaders'\\n\\nexport default fp(schema1)(getQuery('exists'), getArgument('user'), getKind)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getKind/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getKind/files/snippet-get-query-kind.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n```javascript\nfp(schema)(getQuery('getUser'), getArgument('includeSettings'), getKind)\n```\n\n```snapshot2\nFPQL.GetArgumentKind\n```\n"
  },
  {
    "module": "fpql",
    "name": "getDirective",
    "bundle": "Get node's directive by name\n\n```graphql\ntype A @foo {\n  id: ID! @foo\n}\n```\n\n```javascript\nimport { getDirective, getType } from '@browserql/fpql'\nimport { SCHEMA } from '../loaders'\n\nconst type = getType('A')(SCHEMA)\nexport default getDirective('foo')(type)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"main.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport DIRECTIVE from './main.mjs'\\n\\nexport default function Main() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(DIRECTIVE, null, 2)} />\\n}\\n\\nMain.height = 300\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getDirective\",\n    \"files\": [\n      {\n        \"name\": \"main.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport DIRECTIVE from './main.mjs'\\n\\nexport default function Main() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(DIRECTIVE, null, 2)} />\\n}\\n\\nMain.height = 300\\n\"\n      },\n      {\n        \"name\": \"schema.graphql\",\n        \"source\": \"type A @foo {\\n  id: ID! @foo\\n}\\n\"\n      },\n      {\n        \"name\": \"main.mjs\",\n        \"source\": \"import { getDirective, getType } from '@browserql/fpql'\\nimport { SCHEMA } from '../loaders'\\n\\nconst type = getType('A')(SCHEMA)\\nexport default getDirective('foo')(type)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getDirective/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getDirective/files/main.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getExecutableOperation",
    "bundle": "Get executable operation by name\n\n```graphql\nquery Query1($a: Int) {\n  query1(a: $a)\n}\n\nquery Query2($b: Int) {\n  query2(b: $b) {\n    id\n    name\n  }\n}\n```\n\n```javascript\nimport { getExecutableOperation } from '@browserql/fpql'\nimport { parse } from 'graphql'\nimport schema from './query.graphql'\n\nexport default getExecutableOperation('Query2')(parse(schema))\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"main.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport OP from './main.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(OP, null, 2)} />\\n}\\n\\nApp.height = 370\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getExecutableOperation\",\n    \"files\": [\n      {\n        \"name\": \"main.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport OP from './main.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(OP, null, 2)} />\\n}\\n\\nApp.height = 370\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"query Query1($a: Int) {\\n  query1(a: $a)\\n}\\n\\nquery Query2($b: Int) {\\n  query2(b: $b) {\\n    id\\n    name\\n  }\\n}\\n\"\n      },\n      {\n        \"name\": \"main.mjs\",\n        \"source\": \"import { getExecutableOperation } from '@browserql/fpql'\\nimport { parse } from 'graphql'\\nimport schema from './query.graphql'\\n\\nexport default getExecutableOperation('Query2')(parse(schema))\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Unknown file extension \\\\\\\".graphql\\\\\\\" for /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getExecutableOperation/files/query.graphql\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "state-react",
    "name": "about",
    "bundle": "State allows you to manage a state based on your cached queries.\n\nIt is a `React` wrapper around `@browserql/cache`.\n\n```graphql\ntype Query {\n  getCounter: Int @default(value: 100)\n}\n\nquery {\n  getCounter\n}\n```\n\n```javascript\nimport React from 'react'\nimport State from '@browserql/state-react'\nimport { parse } from 'graphql'\n\nconst CacheState = make(cache, schema)\n\nexport default function Counter() {\n  return (\n    <CacheState query={getCounter} select=\"getCounter\">\n      {(counter, setCounter) => (\n        <button onClick={setCounter.increment}>{counter}</button>\n      )}\n    </CacheState>\n  )\n}\n```\n"
  },
  {
    "module": "fragments",
    "name": "usage",
    "bundle": "Generate fragments from types (_GraphQL_)\n\n## Example\n\nLet's take a `GraphQL` schema\n\n```graphql\ntype Post {\n  title: String!\n  author: Author!\n}\n\ntype Author {\n  name: String!\n  email: String\n}\n```\n\nNow let's import it along with our fragment builder\n\n```javascript\nimport { buildFragment } from '@browserql/fragments'\nimport { SCHEMA } from '../loaders'\n\n// You can now build a fragment specifying the target type\nexport default buildFragment(SCHEMA, 'Author')\n```\n\nWhich will generate the following string:\n\n```react\n{\n  \"file\": {\n    \"name\": \"index.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport fragment from './index.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={fragment} />\\n}\\n\\nApp.height = 280\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fragments\",\n    \"name\": \"usage\",\n    \"files\": [\n      {\n        \"name\": \"PostAuthor.graphql\",\n        \"source\": \"type Post {\\n  title: String!\\n  author: Author!\\n}\\n\\ntype Author {\\n  name: String!\\n  email: String\\n}\\n\"\n      },\n      {\n        \"name\": \"index.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport fragment from './index.mjs'\\n\\nexport default function App() {\\n  return <Code language=\\\"graphql\\\" value={fragment} />\\n}\\n\\nApp.height = 280\\n\"\n      },\n      {\n        \"name\": \"index.mjs\",\n        \"source\": \"import { buildFragment } from '@browserql/fragments'\\nimport { SCHEMA } from '../loaders'\\n\\n// You can now build a fragment specifying the target type\\nexport default buildFragment(SCHEMA, 'Author')\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fragments/usage/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fragments/usage/files/index.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n#### Code sandbox\n\n```sandbox\nfragments-cnwol\n```\n\n#### API\n\nThis is the `Typescript` signature of the `buildFragment` function:\n\n```typescript\nbuildFragment(\n  schema: graphql.DocumentNode\n  type: string\n  options?: {\n    saveAs?: string\n    select?: string[]\n  }\n): string\n```\n\n#### Saving as\n\nBy default, the name of the new fragment is the type's name suffixed by `Fragment`\n\n```graphql\ntype Foo {\n  name: String\n}\n```\n\n```javascript\nbuildFragment(schema, 'Foo')\n```\n\n```snapshot2\nFragments.DefaultName\n```\n\nNotice here the fragment is named `FooFragment` after the type `Foo`.\n\nYou can override this using the `saveAs` property\n\n```javascript\nbuildFragment(schema, 'Foo', { saveAs: 'MyFragment' })\n```\n\n```snapshot2\nFragments.SaveAs\n```\n\n#### Nested fragments\n\nNote that if the type is using other types, it will also build fragments for these types:\n\n```javascript\nbuildFragment(schema, 'Post')\n```\n\nWhich will generate the following string:\n\n```snapshot2\nFragments.Nested\n```\n\n#### Field selection\n\nYou can also select the fields:\n\n```javascript\nbuildFragment(schema, 'Post', {\n  select: ['title'],\n})\n```\n\n```snapshot2\nFragments.Select\n```\n\n#### Nested field selection\n\nYou can use dot notation to reach nested fields\n\n```graphql\ntype Recording {\n  name: String\n  settings: RecordingSettings\n}\n\ntype RecordingSettings {\n  name: String\n  audioConfiguration: AudioConfiguration\n}\n\ntype AudioConfiguration {\n  name: String\n  encoder: Encoder\n}\n\nenum Encoder {\n  mp3\n  wav\n}\n```\n\n```javascript\nbuildFragment(schema, 'Recording', {\n  select: ['settings.audioConfiguration.encoder'],\n})\n```\n\n```snapshot2\nFragments.InnerSelect\n```\n\n#### Errors\n\nIf the target type does not exist, it will throw an error\n\n```graphql\ntype Foo {\n  id: ID\n}\n```\n\n```javascript\nbuildFragment(schema, 'Bar')\n```\n\n```snapshot2\nFragments.NoSuchTypeError\n```\n\n##### Nested type missing\n\nIt will **NOT** throw if a nested type is missing. Instead, it would assume it is a scalar\n\n```graphql\ntype Foo {\n  bar: Bar\n}\n```\n\n```javascript\nbuildFragment(schema, 'Foo')\n```\n\n```snapshot2\nFragments.NoSuchNestedType\n```\n"
  },
  {
    "module": "input",
    "name": "example",
    "bundle": "Transform a `GraphQL` type to a `GraphQL` input.\n\n```graphql\ntype Author {\n  name: String!\n  email: String\n}\n```\n\n```javascript\nimport { transformTypeToInput } from '@browserql/input'\nimport { getType } from '@browserql/fpql'\nimport { schema } from '../loaders'\n\nconst type = getType('Author')(schema)\n\nexport default transformTypeToInput(type, schema)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"example.tsx\",\n    \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport { print } from 'graphql'\\n\\nimport example from './example.mjs'\\n\\nexport default function Example() {\\n  return <Code language=\\\"graphql\\\" value={print(example)} />\\n}\\n\\nExample.height = 220\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"input\",\n    \"name\": \"example\",\n    \"files\": [\n      {\n        \"name\": \"example.graphql\",\n        \"source\": \"type Author {\\n  name: String!\\n  email: String\\n}\\n\"\n      },\n      {\n        \"name\": \"example.tsx\",\n        \"source\": \"import Code from '@browserql/components/Code'\\nimport React from 'react'\\nimport { print } from 'graphql'\\n\\nimport example from './example.mjs'\\n\\nexport default function Example() {\\n  return <Code language=\\\"graphql\\\" value={print(example)} />\\n}\\n\\nExample.height = 220\\n\"\n      },\n      {\n        \"name\": \"example.mjs\",\n        \"source\": \"import { transformTypeToInput } from '@browserql/input'\\nimport { getType } from '@browserql/fpql'\\nimport { schema } from '../loaders'\\n\\nconst type = getType('Author')(schema)\\n\\nexport default transformTypeToInput(type, schema)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/input/example/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/input/example/files/example.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  },
  {
    "module": "fpql",
    "name": "getArguments",
    "bundle": "Get node's arguments\n\n## Get field's arguments\n\n```graphql\ntype Query {\n  sayHello(to: String = \"everybody\"): String!\n}\n```\n\n```javascript\nimport { getArguments, getQuery } from '@browserql/fpql'\nimport fp from '@browserql/fp'\nimport { FIELDS } from '../loaders'\n\nexport default fp(FIELDS)(getQuery('sayHello'), getArguments)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"fields.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './fields.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 500\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArguments\",\n    \"files\": [\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type User @model(collection: \\\"users\\\") {\\n  email: EmailAddress!\\n}\\n\"\n      },\n      {\n        \"name\": \"directive.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './directive.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n      },\n      {\n        \"name\": \"fields.graphql\",\n        \"source\": \"type Query {\\n  sayHello(to: String = \\\"everybody\\\"): String!\\n}\\n\"\n      },\n      {\n        \"name\": \"fields.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './fields.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 500\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"query Get($page: Int = 1) {\\n  get(page: $page)\\n}\\n\"\n      },\n      {\n        \"name\": \"query.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './query.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArguments, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { DIRECTIVES } from '../loaders'\\n\\nexport default fp(DIRECTIVES)(getType('User'), getDirective('model'), getArguments)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/directive.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"fields.mjs\",\n        \"source\": \"import { getArguments, getQuery } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { FIELDS } from '../loaders'\\n\\nexport default fp(FIELDS)(getQuery('sayHello'), getArguments)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/fields.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { getArguments, getExecutableOperation } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { QUERY } from '../loaders'\\n\\nexport default fp(QUERY)(getExecutableOperation('Get'), getArguments)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/query.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Get directive's arguments\n\n```graphql\ntype User @model(collection: \"users\") {\n  email: EmailAddress!\n}\n```\n\n```javascript\nimport { getArguments, getType, getDirective } from '@browserql/fpql'\nimport fp from '@browserql/fp'\nimport { DIRECTIVES } from '../loaders'\n\nexport default fp(DIRECTIVES)(getType('User'), getDirective('model'), getArguments)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"directive.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './directive.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArguments\",\n    \"files\": [\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type User @model(collection: \\\"users\\\") {\\n  email: EmailAddress!\\n}\\n\"\n      },\n      {\n        \"name\": \"directive.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './directive.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n      },\n      {\n        \"name\": \"fields.graphql\",\n        \"source\": \"type Query {\\n  sayHello(to: String = \\\"everybody\\\"): String!\\n}\\n\"\n      },\n      {\n        \"name\": \"fields.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './fields.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 500\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"query Get($page: Int = 1) {\\n  get(page: $page)\\n}\\n\"\n      },\n      {\n        \"name\": \"query.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './query.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArguments, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { DIRECTIVES } from '../loaders'\\n\\nexport default fp(DIRECTIVES)(getType('User'), getDirective('model'), getArguments)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/directive.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"fields.mjs\",\n        \"source\": \"import { getArguments, getQuery } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { FIELDS } from '../loaders'\\n\\nexport default fp(FIELDS)(getQuery('sayHello'), getArguments)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/fields.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { getArguments, getExecutableOperation } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { QUERY } from '../loaders'\\n\\nexport default fp(QUERY)(getExecutableOperation('Get'), getArguments)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/query.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n\n## Get executable operation's arguments\n\n```graphql\nquery Get($page: Int = 1) {\n  get(page: $page)\n}\n```\n\n```javascript\nimport { getArguments, getExecutableOperation } from '@browserql/fpql'\nimport fp from '@browserql/fp'\nimport { QUERY } from '../loaders'\n\nexport default fp(QUERY)(getExecutableOperation('Get'), getArguments)\n```\n\n```react\n{\n  \"file\": {\n    \"name\": \"query.tsx\",\n    \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './query.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n  },\n  \"ctx\": {\n    \"module\": \"fpql\",\n    \"name\": \"getArguments\",\n    \"files\": [\n      {\n        \"name\": \"directive.graphql\",\n        \"source\": \"type User @model(collection: \\\"users\\\") {\\n  email: EmailAddress!\\n}\\n\"\n      },\n      {\n        \"name\": \"directive.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './directive.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n      },\n      {\n        \"name\": \"fields.graphql\",\n        \"source\": \"type Query {\\n  sayHello(to: String = \\\"everybody\\\"): String!\\n}\\n\"\n      },\n      {\n        \"name\": \"fields.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './fields.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 500\\n\"\n      },\n      {\n        \"name\": \"query.graphql\",\n        \"source\": \"query Get($page: Int = 1) {\\n  get(page: $page)\\n}\\n\"\n      },\n      {\n        \"name\": \"query.tsx\",\n        \"source\": \"import React from 'react'\\nimport Code from '@browserql/components/Code'\\nimport ARGS from './query.mjs'\\n\\nexport default function Fields() {\\n  return <Code language=\\\"json\\\" value={JSON.stringify(ARGS, null, 2)} />\\n}\\n\\nFields.height = 430\\n\"\n      },\n      {\n        \"name\": \"directive.mjs\",\n        \"source\": \"import { getArguments, getType, getDirective } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { DIRECTIVES } from '../loaders'\\n\\nexport default fp(DIRECTIVES)(getType('User'), getDirective('model'), getArguments)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/directive.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"fields.mjs\",\n        \"source\": \"import { getArguments, getQuery } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { FIELDS } from '../loaders'\\n\\nexport default fp(FIELDS)(getQuery('sayHello'), getArguments)\\n\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/fields.mjs\\\"\\n}\\n\"\n      },\n      {\n        \"name\": \"query.mjs\",\n        \"source\": \"import { getArguments, getExecutableOperation } from '@browserql/fpql'\\nimport fp from '@browserql/fp'\\nimport { QUERY } from '../loaders'\\n\\nexport default fp(QUERY)(getExecutableOperation('Get'), getArguments)\",\n        \"result\": \"{\\n  \\\"error\\\": \\\"Cannot find module '/home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/loaders' imported from /home/fra/Dev/perso/browserql/packages/examples/modules/fpql/getArguments/files/query.mjs\\\"\\n}\\n\"\n      }\n    ]\n  }\n}\n```\n"
  }
]
